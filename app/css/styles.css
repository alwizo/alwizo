/*
 * A partial implementation of the Ruby list functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb
 */
/*
 * A partial implementation of the Ruby constants functions from Compass:
 * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb
 */
/*
 * A partial implementation of the Ruby display functions from Compass:
 * https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb
 */

/*# sourceMappingURL=data:application/json;charset=utf8;base64,{"version":3,"file":"styles.css","sources":["styles.scss","_variables.scss","../../bower_components/compass-mixins/lib/_compass.scss","../../bower_components/compass-mixins/lib/compass/_functions.scss","../../bower_components/compass-mixins/lib/compass/functions/_lists.scss","../../bower_components/compass-mixins/lib/compass/functions/_constants.scss","../../bower_components/compass-mixins/lib/compass/functions/_display.scss","../../bower_components/compass-mixins/lib/compass/_utilities.scss","../../bower_components/compass-mixins/lib/compass/utilities/_color.scss","../../bower_components/compass-mixins/lib/compass/utilities/color/_contrast.scss","../../bower_components/compass-mixins/lib/compass/utilities/_general.scss","../../bower_components/compass-mixins/lib/compass/utilities/general/_reset.scss","../../bower_components/compass-mixins/lib/compass/reset/_utilities.scss","../../bower_components/compass-mixins/lib/compass/utilities/general/_clearfix.scss","../../bower_components/compass-mixins/lib/compass/utilities/general/_hacks.scss","../../bower_components/compass-mixins/lib/compass/_support.scss","../../bower_components/compass-mixins/lib/compass/utilities/general/_float.scss","../../bower_components/compass-mixins/lib/compass/utilities/general/_tag-cloud.scss","../../bower_components/compass-mixins/lib/compass/utilities/general/_min.scss","../../bower_components/compass-mixins/lib/compass/utilities/_sprites.scss","../../bower_components/compass-mixins/lib/compass/utilities/sprites/_base.scss","../../bower_components/compass-mixins/lib/compass/utilities/sprites/_sprite-img.scss","../../bower_components/compass-mixins/lib/compass/utilities/_tables.scss","../../bower_components/compass-mixins/lib/compass/utilities/tables/_alternating-rows-and-columns.scss","../../bower_components/compass-mixins/lib/compass/utilities/tables/_borders.scss","../../bower_components/compass-mixins/lib/compass/utilities/tables/_scaffolding.scss","../../bower_components/compass-mixins/lib/compass/typography/_links.scss","../../bower_components/compass-mixins/lib/compass/typography/links/_hover-link.scss","../../bower_components/compass-mixins/lib/compass/typography/links/_link-colors.scss","../../bower_components/compass-mixins/lib/compass/typography/links/_unstyled-link.scss","../../bower_components/compass-mixins/lib/compass/typography/_lists.scss","../../bower_components/compass-mixins/lib/compass/typography/lists/_horizontal-list.scss","../../bower_components/compass-mixins/lib/compass/typography/lists/_bullets.scss","../../bower_components/compass-mixins/lib/compass/typography/lists/_inline-list.scss","../../bower_components/compass-mixins/lib/compass/typography/lists/_inline-block-list.scss","../../bower_components/compass-mixins/lib/compass/css3/_inline-block.scss","../../bower_components/compass-mixins/lib/compass/css3/_shared.scss","../../bower_components/compass-mixins/lib/compass/typography/_text.scss","../../bower_components/compass-mixins/lib/compass/typography/text/_ellipsis.scss","../../bower_components/compass-mixins/lib/compass/typography/text/_nowrap.scss","../../bower_components/compass-mixins/lib/compass/typography/text/_replacement.scss","../../bower_components/compass-mixins/lib/compass/typography/text/_force-wrap.scss","../../bower_components/compass-mixins/lib/compass/_typography.scss","../../bower_components/compass-mixins/lib/compass/typography/_vertical_rhythm.scss","../../bower_components/compass-mixins/lib/compass/layout/_grid-background.scss","../../bower_components/compass-mixins/lib/compass/css3/_images.scss","../../bower_components/compass-mixins/lib/compass/css3/_background-size.scss","../../bower_components/compass-mixins/lib/compass/_css3.scss","../../bower_components/compass-mixins/lib/compass/css3/_border-radius.scss","../../bower_components/compass-mixins/lib/compass/css3/_opacity.scss","../../bower_components/compass-mixins/lib/compass/css3/_box-shadow.scss","../../bower_components/compass-mixins/lib/compass/css3/_text-shadow.scss","../../bower_components/compass-mixins/lib/compass/css3/_columns.scss","../../bower_components/compass-mixins/lib/compass/css3/_box-sizing.scss","../../bower_components/compass-mixins/lib/compass/css3/_box.scss","../../bower_components/compass-mixins/lib/compass/css3/_background-clip.scss","../../bower_components/compass-mixins/lib/compass/css3/_background-origin.scss","../../bower_components/compass-mixins/lib/compass/css3/_font-face.scss","../../bower_components/compass-mixins/lib/compass/css3/_transform.scss","../../bower_components/compass-mixins/lib/compass/css3/_transition.scss","../../bower_components/compass-mixins/lib/compass/css3/_appearance.scss","../../bower_components/compass-mixins/lib/compass/css3/_regions.scss","../../bower_components/compass-mixins/lib/compass/css3/_hyphenation.scss","../../bower_components/compass-mixins/lib/compass/css3/_filter.scss"],"sourcesContent":["@import \"_variables\";\r\n@import \"../../bower_components/compass-mixins/lib/_compass.scss\";\r\n\r\n","$dark-grey: #7e7e7e;","@import \"compass/functions\";\r\n@import \"compass/utilities\";\r\n@import \"compass/typography\";\r\n@import \"compass/css3\";\r\n","@import \"functions/lists\";\r\n@import \"functions/constants\";\r\n@import \"functions/display\";\r\n","/*\r\n * A partial implementation of the Ruby list functions from Compass:\r\n * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/lists.rb\r\n */\r\n\r\n\r\n// compact is part of libsass\r\n\r\n@function -compass-nth($list, $place) {\r\n  // Yep, Sass-lists are 1-indexed.\r\n  @if $place == \"first\" {\r\n    $place: 1;\r\n  }\r\n  @if $place == \"last\" {\r\n    $place: length($list);\r\n  }\r\n  @return nth($list, $place);\r\n}\r\n\r\n// compass_list and compass_space_list can't be implemented in sass script\r\n\r\n@function -compass-list-size($list) {\r\n  @return length($list);\r\n}\r\n\r\n@function -compass-slice($list, $start, $end: false) {\r\n  @if $end == false {\r\n    $end: length($list);\r\n  }\r\n  $full: nth($list, $start);\r\n  @for $i from $start + 1 through $end {\r\n    $full: $full, nth($list, $i);\r\n  }\r\n  @return $full;\r\n}\r\n\r\n@function reject($list, $reject1, $reject2:null, $reject3:null, $reject4:null, $reject5:null, $reject6:null, $reject7:null, $reject8:null, $reject9:null) {\r\n  $rejects: $reject1, $reject2, $reject3, $reject4, $reject5, $reject6, $reject7, $reject8, $reject9;\r\n\r\n  $full: false;\r\n  @each $item in $list {\r\n    @if index($rejects, $item) {}\r\n    @else {\r\n      @if $full {\r\n        $full: $full, $item;\r\n      }\r\n      @else {\r\n        $full: $item;\r\n      }\r\n    }\r\n  }\r\n  @return $full;\r\n}\r\n","/*\r\n * A partial implementation of the Ruby constants functions from Compass:\r\n * https://github.com/Compass/compass/blob/stable/lib/compass/sass_extensions/functions/constants.rb\r\n */\r\n\r\n@function opposite-position($from) {\r\n    @if ($from == top) {\r\n        @return bottom;\r\n    } @else if ($from == bottom) {\r\n        @return top;\r\n    } @else if ($from == left) {\r\n        @return right;\r\n    } @else if ($from == right) {\r\n        @return left;\r\n    } @else if ($from == center) {\r\n        @return center;\r\n    }\r\n}\r\n","/*\r\n * A partial implementation of the Ruby display functions from Compass:\r\n * https://github.com/Compass/compass/blob/stable/core/lib/compass/core/sass_extensions/functions/display.rb\r\n */\r\n\r\n@function elements-of-type($type){\r\n    @if ($type == block){\r\n        @return address, article, aside, blockquote, center, dir, div, dd, details, dl, dt, fieldset, figcaption, figure, form, footer, frameset, h1, h2, h3, h4, h5, h6, hr, header, hgroup, isindex, main, menu, nav, noframes, noscript, ol, p, pre, section, summary, ul;\r\n    } @else if ($type == inline){\r\n        @return a, abbr, acronym, audio, b, basefont, bdo, big, br, canvas, cite, code, command, datalist, dfn, em, embed, font, i, img, input, keygen, kbd, label, mark, meter, output, progress, q, rp, rt, ruby, s, samp, select, small, span, strike, strong, sub, sup, textarea, time, tt, u, var, video, wbr;\r\n    } @else if ($type == inline-block){\r\n        @return img;\r\n    } @else if ($type == table){\r\n        @return table;\r\n    } @else if ($type == list-item){\r\n        @return li;\r\n    } @else if ($type == table-row-group){\r\n        @return tbody;\r\n    } @else if ($type == table-header-group){\r\n        @return thead;\r\n    } @else if ($type == table-footer-group){\r\n        @return tfoot;\r\n    } @else if ($type == table-row){\r\n        @return tr;\r\n    } @else if ($type == table-cell){\r\n        @return th, td;\r\n    } @else if ($type == html5-block){\r\n        @return article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary;\r\n    } @else if ($type == html5-inline){\r\n        @return audio, canvas, command, datalist, embed, keygen, mark, meter, output, progress, rp, rt, ruby, time, video, wbr;\r\n    } @else if ($type == html5){\r\n        @return article, aside, audio, canvas, command, datalist, details, embed, figcaption, figure, footer, header, hgroup, keygen, main, mark, menu, meter, nav, output, progress, rp, rt, ruby, section, summary, time, video, wbr;\r\n    } @else if ($type == text-input){\r\n        @return input, textarea;\r\n    }\r\n}\r\n","@import \"utilities/color\";\r\n@import \"utilities/general\";\r\n@import \"utilities/sprites\";\r\n@import \"utilities/tables\";\r\n\r\n// deprecated\r\n@import \"typography/links\";\r\n@import \"typography/lists\";\r\n@import \"typography/text\";\r\n","@import \"color/contrast\";","$contrasted-dark-default:   #000 !default;\r\n$contrasted-light-default:  #fff !default;\r\n$contrasted-lightness-threshold: 30% !default;\r\n\r\n// Returns the `$light` color when the `$color` is dark\r\n// and the `$dark` color when the `$color` is light.\r\n// The `$threshold` is a percent between `0%` and `100%` and it determines\r\n// when the lightness of `$color` changes from \"dark\" to \"light\".\r\n@function contrast-color(\r\n  $color,\r\n  $dark: $contrasted-dark-default,\r\n  $light: $contrasted-light-default,\r\n  $threshold: $contrasted-lightness-threshold\r\n) {\r\n  @return if(lightness($color) < $threshold, $light, $dark)\r\n}\r\n\r\n// Sets the specified background color and calculates a dark or light contrasted text color.\r\n// The arguments are passed through to the [contrast-color function](#function-contrast-color).\r\n@mixin contrasted(\r\n  $background-color,\r\n  $dark: $contrasted-dark-default,\r\n  $light: $contrasted-light-default,\r\n  $threshold: $contrasted-lightness-threshold\r\n) {\r\n  background-color: $background-color;\r\n  color: contrast-color($background-color, $dark, $light, $threshold);\r\n}","@import \"general/reset\";\r\n@import \"general/clearfix\";\r\n@import \"general/float\";\r\n@import \"general/tag-cloud\";\r\n@import \"general/hacks\";\r\n@import \"general/min\";\r\n","// This module has moved.\r\n@import \"../../reset/utilities\";\r\n","// Based on [Eric Meyer's reset 2.0](http://meyerweb.com/eric/tools/css/reset/index.html)\r\n// Global reset rules.\r\n// For more specific resets, use the reset mixins provided below\r\n@mixin global-reset {\r\n  html, body, div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed, \r\n  figure, figcaption, footer, header, hgroup, \r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    @include reset-box-model;\r\n    @include reset-font; }\r\n  // Unlike Eric's original reset, we reset the html element to be compatible\r\n  // with the vertical rhythm mixins.\r\n  html {\r\n    @include reset-body; }\r\n  ol, ul {\r\n    @include reset-list-style; }\r\n  table {\r\n    @include reset-table; }\r\n  caption, th, td {\r\n    @include reset-table-cell; }\r\n  q, blockquote {\r\n    @include reset-quotation; }\r\n  a img {\r\n    @include reset-image-anchor-border; }\r\n  @include reset-html5; }\r\n\r\n// Reset all elements within some selector scope. To reset the selector itself,\r\n// mixin the appropriate reset mixin for that element type as well. This could be\r\n// useful if you want to style a part of your page in a dramatically different way.\r\n@mixin nested-reset {\r\n  div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed, \r\n  figure, figcaption, footer, header, hgroup, \r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    @include reset-box-model;\r\n    @include reset-font; }\r\n  table {\r\n    @include reset-table; }\r\n  caption, th, td {\r\n    @include reset-table-cell; }\r\n  q, blockquote {\r\n    @include reset-quotation; }\r\n  a img {\r\n    @include reset-image-anchor-border; } }\r\n\r\n// Reset the box model measurements.\r\n@mixin reset-box-model {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0; }\r\n\r\n// Reset the font and vertical alignment.\r\n@mixin reset-font {\r\n  font: inherit;\r\n  font-size: 100%;\r\n  vertical-align: baseline; }\r\n\r\n// Resets the outline when focus.\r\n// For accessibility you need to apply some styling in its place.\r\n@mixin reset-focus {\r\n  outline: 0; }\r\n\r\n// Reset a body element.\r\n@mixin reset-body {\r\n  line-height: 1; }\r\n\r\n// Reset the list style of an element.\r\n@mixin reset-list-style {\r\n  list-style: none; }\r\n\r\n// Reset a table\r\n@mixin reset-table {\r\n  border-collapse: collapse;\r\n  border-spacing: 0; }\r\n\r\n// Reset a table cell (`th`, `td`)\r\n@mixin reset-table-cell {\r\n  text-align: left;\r\n  font-weight: normal;\r\n  vertical-align: middle; }\r\n\r\n// Reset a quotation (`q`, `blockquote`)\r\n@mixin reset-quotation {\r\n  quotes: none;\r\n  &:before, &:after {\r\n    content: \"\"; \r\n    content: none; } }\r\n\r\n// Resets the border.\r\n@mixin reset-image-anchor-border {\r\n  border: none; }\r\n\r\n// Unrecognized elements are displayed inline.\r\n// This reset provides a basic reset for block html5 elements\r\n// so they are rendered correctly in browsers that don't recognize them\r\n// and reset in browsers that have default styles for them.\r\n@mixin reset-html5 {\r\n  #{elements-of-type(html5-block)} {\r\n    display: block; } }\r\n\r\n// Resets the display of inline and block elements to their default display\r\n// according to their tag type. Elements that have a default display that varies across\r\n// versions of html or browser are not handled here, but this covers the 90% use case.\r\n// Usage Example:\r\n//\r\n//     // Turn off the display for both of these classes\r\n//     .unregistered-only, .registered-only\r\n//       display: none\r\n//     // Now turn only one of them back on depending on some other context.\r\n//     body.registered\r\n//       +reset-display(\".registered-only\")\r\n//     body.unregistered\r\n//       +reset-display(\".unregistered-only\")\r\n@mixin reset-display($selector: \"\", $important: false) {\r\n  #{append-selector(elements-of-type(\"inline\"), $selector)} {\r\n    @if $important {\r\n      display: inline !important; }\r\n    @else {\r\n      display: inline; } }\r\n  #{append-selector(elements-of-type(\"block\"), $selector)} {\r\n    @if $important {\r\n      display: block !important; }\r\n    @else {\r\n      display: block; } } }\r\n","// @doc off\r\n// Extends the bottom of the element to enclose any floats it contains.\r\n// @doc on\r\n\r\n@import \"hacks\";\r\n\r\n// This basic method is preferred for the usual case, when positioned\r\n// content will not show outside the bounds of the container.\r\n//\r\n// Recommendations include using this in conjunction with a width.\r\n// Credit: [quirksmode.org](http://www.quirksmode.org/blog/archives/2005/03/clearing_floats.html)\r\n@mixin clearfix {\r\n  overflow: hidden;\r\n  @include has-layout;\r\n}\r\n\r\n// This older method from Position Is Everything called\r\n// [Easy Clearing](http://www.positioniseverything.net/easyclearing.html)\r\n// has the advantage of allowing positioned elements to hang\r\n// outside the bounds of the container at the expense of more tricky CSS.\r\n@mixin legacy-pie-clearfix {\r\n  &:after {\r\n    content    : \"\\0020\";\r\n    display    : block;\r\n    height     : 0;\r\n    clear      : both;\r\n    overflow   : hidden;\r\n    visibility : hidden;\r\n  }\r\n  @include has-layout;\r\n}\r\n\r\n// This is an updated version of the PIE clearfix method that reduces the amount of CSS output.\r\n// If you need to support Firefox before 3.5 you need to use `legacy-pie-clearfix` instead.\r\n//\r\n// Adapted from: [A new micro clearfix hack](http://nicolasgallagher.com/micro-clearfix-hack/)\r\n@mixin pie-clearfix {\r\n  &:after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n  }\r\n  @include has-layout;\r\n}\r\n","@import \"../../support\";\r\n\r\n// The `zoom` approach generates less CSS but does not validate.\r\n// Set this to `block` to use the display-property to hack the\r\n// element to gain layout.\r\n$default-has-layout-approach: zoom !default;\r\n\r\n// This mixin causes an element matching the selector\r\n// to gain the \"hasLayout\" property in internet explorer.\r\n// More information on [hasLayout](http://reference.sitepoint.com/css/haslayout).\r\n@mixin has-layout($approach: $default-has-layout-approach) {\r\n  @if $legacy-support-for-ie {\r\n    @if $approach == zoom {\r\n      @include has-layout-zoom;\r\n    } @else if $approach == block {\r\n      @include has-layout-block;\r\n    } @else {\r\n      @warn \"Unknown has-layout approach: #{$approach}\";\r\n      @include has-layout-zoom;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin has-layout-zoom {\r\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 {\r\n    *zoom: 1;\r\n  }\r\n}\r\n\r\n@mixin has-layout-block {\r\n  @if $legacy-support-for-ie {\r\n    // This makes ie6 get layout\r\n    display: inline-block;\r\n    // and this puts it back to block\r\n    & { display: block; }\r\n  }\r\n}\r\n\r\n// A hack to supply IE6 (and below) with a different property value.\r\n// [Read more](http://www.cssportal.com/css-hacks/#in_css-important).\r\n@mixin bang-hack($property, $value, $ie6-value) {\r\n  @if $legacy-support-for-ie6 {\r\n    #{$property}: #{$value} !important;\r\n    #{$property}: #{$ie6-value};\r\n  }\r\n}\r\n","// Usually compass hacks apply to both ie6 & 7 -- set this to false to disable support for both.\r\n$legacy-support-for-ie: true !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie6 hacks\r\n$legacy-support-for-ie6: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for ie7 hacks\r\n$legacy-support-for-ie7: $legacy-support-for-ie !default;\r\n\r\n// Setting this to false will result in smaller output, but no support for legacy ie8 hacks\r\n$legacy-support-for-ie8: $legacy-support-for-ie !default;\r\n\r\n// @private\r\n// The user can simply set $legacy-support-for-ie and 6, 7, and 8 will be set accordingly,\r\n// But in case the user set each of those explicitly, we need to sync the value of\r\n// this combined variable.\r\n$legacy-support-for-ie: $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8;\r\n\r\n// Whether to output legacy support for mozilla.\r\n// Usually this means hacks to support Firefox 3.6 or earlier.\r\n$legacy-support-for-mozilla: true;\r\n\r\n// Support for mozilla in experimental css3 properties (-moz).\r\n$experimental-support-for-mozilla      : true !default;\r\n// Support for webkit in experimental css3 properties (-webkit).\r\n$experimental-support-for-webkit       : true !default;\r\n// Support for webkit's original (non-standard) gradient syntax.\r\n$support-for-original-webkit-gradients : true !default;\r\n// Support for opera in experimental css3 properties (-o).\r\n$experimental-support-for-opera        : true !default;\r\n// Support for microsoft in experimental css3 properties (-ms).\r\n$experimental-support-for-microsoft    : true !default;\r\n// Support for khtml in experimental css3 properties (-khtml).\r\n$experimental-support-for-khtml        : false !default;\r\n// Support for svg in experimental css3 properties.\r\n// Setting this to true might add significant size to your\r\n// generated stylesheets.\r\n$experimental-support-for-svg          : false !default;\r\n// Support for CSS PIE in experimental css3 properties (-pie).\r\n$experimental-support-for-pie          : false !default;\r\n","// Implementation of float:left with fix for the\r\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\r\n@mixin float-left {\r\n  @include float(left); }\r\n\r\n// Implementation of float:right with fix for the\r\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\r\n@mixin float-right {\r\n  @include float(right); }\r\n\r\n// Direction independent float mixin that fixes the\r\n// [double-margin bug in IE5/6](http://www.positioniseverything.net/explorer/doubled-margin.html)\r\n@mixin float($side: left) {\r\n  display: inline;\r\n  float: unquote($side); }\r\n\r\n// Resets floated elements back to their default of `float: none` and defaults\r\n// to `display: block` unless you pass `inline` as an argument\r\n//\r\n// Usage Example:\r\n//\r\n//     body.homepage\r\n//       #footer li\r\n//         +float-left\r\n//     body.signup\r\n//       #footer li\r\n//         +reset-float\r\n@mixin reset-float($display: block) {\r\n  float: none;\r\n  display: $display; }","// Emits styles for a tag cloud\r\n@mixin tag-cloud($base-size: 1em) {\r\n  font-size: $base-size;\r\n  line-height: 1.2 * $base-size;\r\n  .xxs, .xs, .s, .l, .xl, .xxl {\r\n    line-height: 1.2 * $base-size; }\r\n  .xxs {\r\n    font-size: $base-size / 2; }\r\n  .xs {\r\n    font-size: 2 * $base-size / 3; }\r\n  .s {\r\n    font-size: 3 * $base-size / 4; }\r\n  .l {\r\n    font-size: 4 * $base-size / 3; }\r\n  .xl {\r\n    font-size: 3 * $base-size / 2; }\r\n  .xxl {\r\n    font-size: 2 * $base-size; } }\r\n","@import \"hacks\";\r\n\r\n//**\r\n// Cross browser min-height mixin.\r\n@mixin min-height($value) {\r\n  @include hacked-minimum(height, $value); }\r\n\r\n//**\r\n// Cross browser min-width mixin.\r\n@mixin min-width($value) {\r\n  @include hacked-minimum(width, $value); }\r\n\r\n// @private This mixin is not meant to be used directly.\r\n@mixin hacked-minimum($property, $value) {\r\n  min-#{$property}: $value;\r\n  @include bang-hack($property, auto, $value); }\r\n","@import \"sprites/base\";\r\n@import \"sprites/sprite-img\";\r\n","// Determines those states for which you want to enable magic sprite selectors\r\n$sprite-selectors: hover, target, active !default;\r\n\r\n// Set the width and height of an element to the original\r\n// dimensions of an image before it was included in the sprite.\r\n@mixin sprite-dimensions($map, $sprite) {\r\n  height: image-height(sprite-file($map, $sprite));\r\n  width: image-width(sprite-file($map, $sprite));\r\n}\r\n\r\n// Set the background position of the given sprite `$map` to display the\r\n// sprite of the given `$sprite` name. You can move the image relative to its\r\n// natural position by passing `$offset-x` and `$offset-y`.\r\n@mixin sprite-background-position($map, $sprite, $offset-x: 0, $offset-y: 0) {\r\n  background-position: sprite-position($map, $sprite, $offset-x, $offset-y);  \r\n}\r\n\r\n\r\n// Determines if you want to include magic selectors in your sprites\r\n$disable-magic-sprite-selectors:false !default;\r\n\r\n// Include the position and (optionally) dimensions of this `$sprite`\r\n// in the given sprite `$map`. The sprite url should come from either a base\r\n// class or you can specify the `sprite-url` explicitly like this:\r\n//\r\n//     background: $map no-repeat;\r\n@mixin sprite($map, $sprite, $dimensions: false, $offset-x: 0, $offset-y: 0) {\r\n  @include sprite-background-position($map, $sprite, $offset-x, $offset-y);\r\n  @if $dimensions {\r\n    @include sprite-dimensions($map, $sprite);\r\n  }\r\n  @if not($disable-magic-sprite-selectors) {\r\n    @include sprite-selectors($map, $sprite, $sprite, $offset-x, $offset-y);\r\n  }\r\n}\r\n\r\n// Include the selectors for the `$sprite` given the `$map` and the \r\n// `$full-sprite-name`\r\n// @private\r\n@mixin sprite-selectors($map, $sprite-name, $full-sprite-name, $offset-x: 0, $offset-y: 0) {\r\n  @each $selector in $sprite-selectors {\r\n    @if sprite_has_selector($map, $sprite-name, $selector) {\r\n      &:#{$selector}, &.#{$full-sprite-name}_#{$selector}, &.#{$full-sprite-name}-#{$selector} {\r\n          @include sprite-background-position($map, \"#{$sprite-name}_#{$selector}\", $offset-x, $offset-y);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Generates a class for each space separated name in `$sprite-names`.\r\n// The class will be of the form .<map-name>-<sprite-name>.\r\n//\r\n// If a base class is provided, then each class will extend it.\r\n//\r\n// If `$dimensions` is `true`, the sprite dimensions will specified.\r\n@mixin sprites($map, $sprite-names, $base-class: false, $dimensions: false, $prefix: sprite-map-name($map), $offset-x: 0, $offset-y: 0) {\r\n  @each $sprite-name in $sprite-names {\r\n    @if sprite_does_not_have_parent($map, $sprite-name) {\r\n      $full-sprite-name: \"#{$prefix}-#{$sprite-name}\";\r\n      .#{$full-sprite-name} {\r\n        @if $base-class { @extend #{$base-class}; }\r\n        @include sprite($map, $sprite-name, $dimensions, $offset-x, $offset-y);\r\n      }\r\n    }\r\n  }\r\n}","// @doc off\r\n// Example 1:\r\n//\r\n//     a.twitter\r\n//       +sprite-img(\"icons-32.png\", 1)\r\n//     a.facebook\r\n//       +sprite-img(\"icons-32png\", 2)\r\n//\r\n// Example 2:\r\n//\r\n//     a\r\n//       +sprite-background(\"icons-32.png\")\r\n//       a.twitter\r\n//         +sprite-column(1)\r\n//       a.facebook\r\n//         +sprite-row(2)\r\n// @doc on\r\n\r\n$sprite-default-size: 32px !default;\r\n\r\n$sprite-default-margin: 0px !default;\r\n\r\n$sprite-image-default-width: $sprite-default-size !default;\r\n\r\n$sprite-image-default-height: $sprite-default-size !default;\r\n\r\n// Sets all the rules for a sprite from a given sprite image to show just one of the sprites.\r\n// To reduce duplication use a sprite-bg mixin for common properties and a sprite-select mixin for positioning.\r\n@mixin sprite-img($img, $col, $row: 1, $width: $sprite-image-default-width, $height: $sprite-image-default-height, $margin: $sprite-default-margin) {\r\n  @include sprite-background($img, $width, $height);\r\n  @include sprite-position($col, $row, $width, $height, $margin); \r\n}\r\n\r\n// Sets rules common for all sprites, assumes you want a square, but allows a rectangular region.\r\n@mixin sprite-background($img, $width: $sprite-default-size, $height: $width) {\r\n  @include sprite-background-rectangle($img, $width, $height); \r\n}\r\n\r\n// Sets rules common for all sprites, assumes a rectangular region.\r\n@mixin sprite-background-rectangle($img, $width: $sprite-image-default-width, $height: $sprite-image-default-height) {\r\n  background: image-url($img) no-repeat;\r\n  width: $width;\r\n  height: $height;\r\n  overflow: hidden; \r\n}\r\n\r\n// Allows horizontal sprite positioning optimized for a single row of sprites.\r\n@mixin sprite-column($col, $width: $sprite-image-default-width, $margin: $sprite-default-margin) {\r\n  @include sprite-position($col, 1, $width, 0px, $margin); \r\n}\r\n\r\n// Allows vertical sprite positioning optimized for a single column of sprites.\r\n@mixin sprite-row($row, $height: $sprite-image-default-height, $margin: $sprite-default-margin) {\r\n  @include sprite-position(1, $row, 0px, $height, $margin); \r\n}\r\n\r\n// Allows vertical and horizontal sprite positioning from a grid of equal dimensioned sprites.\r\n@mixin sprite-position($col, $row: 1, $width: $sprite-image-default-width, $height: $sprite-image-default-height, $margin: $sprite-default-margin) {\r\n  $x: ($col - 1) * -$width - ($col - 1) * $margin;\r\n  $y: ($row - 1) * -$height - ($row - 1) * $margin;\r\n  background-position: $x $y; \r\n}\r\n\r\n\r\n\r\n// Similar to 'sprite-replace-text-with-dimensions' but does not autmaticly set the demensions\r\n@mixin sprite-replace-text ($map, $sprite, $dimensions: false, $offset-x: 0, $offset-y: 0) {    \r\n  @include hide-text;\r\n  @include sprite($map, $sprite, $dimensions, $offset-x, $offset-y);\r\n  background-image: $map;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\n// Similar to 'replace-text-with-dimensions' but with sprites\r\n// To use, create your sprite and then pass it in the `$map` param\r\n// The name of the image in the sprite folder should be `$img-name`\r\n@mixin sprite-replace-text-with-dimensions ($map, $sprite, $offset-x: 0, $offset-y: 0){    \r\n  @include sprite-replace-text ($map, $sprite, true, $offset-x, $offset-y);\r\n}","@import \"tables/alternating-rows-and-columns\";\r\n@import \"tables/borders\";\r\n@import \"tables/scaffolding\";\r\n","@mixin alternating-rows-and-columns($even-row-color, $odd-row-color, $dark-intersection, $header-color: white, $footer-color: white) {\r\n  th {\r\n    background-color: $header-color;\r\n    &.even, &:nth-child(2n) {\r\n      background-color: $header-color - $dark-intersection; } }\r\n  tr {\r\n    &.odd, &:nth-child(2n+1) {\r\n      td {\r\n       background-color: $odd-row-color;\r\n       &.even, &:nth-child(2n) {\r\n         background-color: $odd-row-color - $dark-intersection; } } }\r\n    }\r\n  tr.even {\r\n    td {\r\n      background-color: $even-row-color;\r\n      &.even, &:nth-child(2n) {\r\n        background-color: $even-row-color - $dark-intersection; } } }\r\n  tfoot {\r\n    th, td {\r\n      background-color: $footer-color;\r\n      &.even, &:nth-child(2n) {\r\n        background-color: $footer-color - $dark-intersection; } } } }\r\n","@mixin outer-table-borders($width: 2px, $color: black) {\r\n  border: $width solid $color;\r\n  thead {\r\n    th {\r\n      border-bottom: $width solid $color; } }\r\n  tfoot {\r\n    th, td {\r\n      border-top: $width solid $color; } }\r\n  th {\r\n    &:first-child {\r\n      border-right: $width solid $color; } } }\r\n\r\n@mixin inner-table-borders($width: 2px, $color: black) {\r\n  th, td {\r\n    border: {\r\n      right: $width solid $color;\r\n      bottom: $width solid $color;\r\n      left-width: 0px;\r\n      top-width: 0px; };\r\n    &:last-child,\r\n    &.last {\r\n      border-right-width: 0px; } }\r\n\r\n// IE8 ignores rules that are included on the same line as :last-child\r\n// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details\r\n\r\n  tbody, tfoot {\r\n    tr:last-child {\r\n      th, td {\r\n        border-bottom-width: 0px; } }\r\n    tr.last {\r\n      th, td {\r\n        border-bottom-width: 0px; } } } }\r\n","@mixin table-scaffolding {\r\n  th {\r\n    text-align: center;\r\n    font-weight: bold; }\r\n  td,\r\n  th {\r\n    padding: 2px;\r\n    &.numeric {\r\n      text-align: right; } } }\r\n","@import \"links/hover-link\";\r\n@import \"links/link-colors\";\r\n@import \"links/unstyled-link\";\r\n","// a link that only has an underline when you hover over it\r\n@mixin hover-link {\r\n  text-decoration: none;\r\n  &:hover {\r\n    text-decoration: underline; } }\r\n","// Set all the colors for a link with one mixin call.\r\n// Order of arguments is:\r\n//\r\n// 1. normal\r\n// 2. hover\r\n// 3. active\r\n// 4. visited\r\n// 5. focus\r\n//\r\n// Those states not specified will inherit.\r\n// Mixin to an anchor link like so:\r\n//     a\r\n//       +link-colors(#00c, #0cc, #c0c, #ccc, #cc0)\r\n\r\n@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {\r\n  color: $normal;\r\n  @if $visited {\r\n    &:visited {\r\n      color: $visited; } }\r\n  @if $focus {\r\n    &:focus {\r\n      color: $focus; } }\r\n  @if $hover {\r\n    &:hover {\r\n      color: $hover; } }\r\n  @if $active {\r\n    &:active {\r\n      color: $active; } } }\r\n","// A link that looks and acts like the text it is contained within\r\n@mixin unstyled-link {\r\n  color: inherit;\r\n  text-decoration: inherit;\r\n  cursor: inherit;\r\n  &:active, &:focus {\r\n    outline: none; } }\r\n","@import \"lists/horizontal-list\";\r\n@import \"lists/inline-list\";\r\n@import \"lists/inline-block-list\";\r\n@import \"lists/bullets\";\r\n","// Horizontal list layout module.\r\n//\r\n// Easy mode using simple descendant li selectors:\r\n//\r\n//   ul.nav\r\n//     +horizontal-list\r\n//\r\n// Advanced mode:\r\n// If you need to target the list items using a different selector then use\r\n// +horizontal-list-container on your ul/ol and +horizontal-list-item on your li.\r\n// This may help when working on layouts involving nested lists. For example:\r\n//\r\n//   ul.nav\r\n//     +horizontal-list-container\r\n//     > li\r\n//       +horizontal-list-item\r\n\r\n@import \"bullets\";\r\n@import \"../../utilities/general/clearfix\";\r\n@import \"../../utilities/general/reset\";\r\n@import \"../../utilities/general/float\";\r\n\r\n// Can be mixed into any selector that target a ul or ol that is meant\r\n// to have a horizontal layout. Used to implement +horizontal-list.\r\n@mixin horizontal-list-container {\r\n  @include reset-box-model;\r\n  @include clearfix; }\r\n\r\n// Can be mixed into any li selector that is meant to participate in a horizontal layout.\r\n// Used to implement +horizontal-list.\r\n//\r\n// :last-child is not fully supported\r\n// see http://www.quirksmode.org/css/contents.html#t29 for the support matrix\r\n//\r\n// IE8 ignores rules that are included on the same line as :last-child\r\n// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details\r\n//\r\n// Setting `$padding` to `false` disables the padding between list elements\r\n@mixin horizontal-list-item($padding: 4px, $direction: left) {\r\n  @include no-bullet;\r\n  white-space: nowrap;\r\n  @include float($direction);\r\n  @if $padding {\r\n    padding: {\r\n      left: $padding;\r\n      right: $padding;\r\n    }\r\n    &:first-child, &.first { padding-#{$direction}: 0; }\r\n    &:last-child { padding-#{opposite-position($direction)}: 0; }\r\n    &.last { padding-#{opposite-position($direction)}: 0; }\r\n  }\r\n}\r\n\r\n// A list(ol,ul) that is layed out such that the elements are floated left and won't wrap.\r\n// This is not an inline list.\r\n//\r\n// Setting `$padding` to `false` disables the padding between list elements\r\n@mixin horizontal-list($padding: 4px, $direction: left) {\r\n  @include horizontal-list-container;\r\n  li {\r\n    @include horizontal-list-item($padding, $direction); } }\r\n","// Turn off the bullet for an element of a list\r\n@mixin no-bullet {\r\n  list-style-image : none;\r\n  list-style-type  : none;\r\n  margin-left      : 0;\r\n}\r\n\r\n// turns off the bullets for an entire list\r\n@mixin no-bullets {\r\n  list-style: none;\r\n  li { @include no-bullet; }\r\n}\r\n\r\n// Make a list(ul/ol) have an image bullet.\r\n//\r\n// The mixin should be used like this for an icon that is 5x7:\r\n//\r\n//     ul.pretty\r\n//       +pretty-bullets(\"my-icon.png\", 5px, 7px)\r\n//\r\n// Additionally, if the image dimensions are not provided,\r\n// The image dimensions will be extracted from the image itself.\r\n//\r\n//     ul.pretty\r\n//       +pretty-bullets(\"my-icon.png\")\r\n//\r\n@mixin pretty-bullets($bullet-icon, $width: image-width($bullet-icon), $height: image-height($bullet-icon), $line-height: 18px, $padding: 14px) {\r\n  margin-left: 0;\r\n  li {\r\n    padding-left: $padding;\r\n    background: image-url($bullet-icon) no-repeat ($padding - $width) / 2 ($line-height - $height) / 2;\r\n    list-style-type: none;\r\n  }\r\n}\r\n","// makes a list inline.\r\n\r\n@mixin inline-list {\r\n  list-style-type: none;\r\n  &, & li {\r\n    margin: 0px;\r\n    padding: 0px;\r\n    display: inline;\r\n  }\r\n}\r\n\r\n// makes an inline list delimited with the passed string.\r\n// Defaults to making a comma-separated list.\r\n//\r\n// Please make note of the browser support issues before using this mixin:\r\n//\r\n// use of `content` and `:after` is not fully supported in all browsers.\r\n// See quirksmode for the [support matrix](http://www.quirksmode.org/css/contents.html#t15)\r\n//\r\n// `:last-child` is not fully supported.\r\n// see quirksmode for the [support matrix](http://www.quirksmode.org/css/contents.html#t29).\r\n//\r\n// IE8 ignores rules that are included on the same line as :last-child\r\n// see http://www.richardscarrott.co.uk/posts/view/ie8-last-child-bug for details\r\n\r\n@mixin delimited-list($separator: \", \") {\r\n  @include inline-list;\r\n  li {\r\n    &:after { content: $separator; }\r\n    &:last-child {\r\n      &:after { content: \"\"; }\r\n    }\r\n    &.last {\r\n      &:after { content: \"\"; }\r\n    }\r\n  }\r\n}\r\n\r\n// See [delimited-list](#mixin-delimited-list)\r\n// @deprecated\r\n@mixin comma-delimited-list {\r\n  @warn \"comma-delimited-list is deprecated. Please use delimited-list instead.\";\r\n  @include delimited-list;\r\n}\r\n","// Inline-Block list layout module.\r\n//\r\n// Easy mode using simple descendant li selectors:\r\n//\r\n//     ul.nav {\r\n//       @import inline-block-list;\r\n//     }\r\n//\r\n// Advanced mode:\r\n// If you need to target the list items using a different selector then use\r\n// `@include inline-block-list-container` on your ul/ol and\r\n// `@include inline-block-list-item` on your li. This may help when working\r\n// on layouts involving nested lists. For example:\r\n//\r\n//     ul.nav {\r\n//       @include inline-block-list-container;\r\n//       > li {\r\n//         @include inline-block-list-item;\r\n//       }\r\n//     }\r\n\r\n@import \"bullets\";\r\n@import \"horizontal-list\";\r\n@import \"../../utilities/general/float\";\r\n@import \"../../css3/inline-block\";\r\n\r\n// Can be mixed into any selector that target a ul or ol that is meant\r\n// to have an inline-block layout. Used to implement `inline-block-list`.\r\n@mixin inline-block-list-container {\r\n  @include horizontal-list-container; }\r\n\r\n// Can be mixed into any li selector that is meant to participate in a horizontal layout.\r\n// Used to implement `inline-block-list`.\r\n@mixin inline-block-list-item($padding: false) {\r\n  @include no-bullet;\r\n  @include inline-block;\r\n  white-space: nowrap;\r\n  @if $padding {\r\n    padding: {\r\n      left: $padding;\r\n      right: $padding;\r\n    };\r\n  }\r\n}\r\n\r\n// A list(ol,ul) that is layed out such that the elements are inline-block and won't wrap.\r\n@mixin inline-block-list($padding: false) {\r\n  @include inline-block-list-container;\r\n  li {\r\n    @include inline-block-list-item($padding); } }\r\n","@import \"shared\";\r\n\r\n// Set `$inline-block-alignment` to `none` or `false` to disable the output\r\n// of a vertical-align property in the inline-block mixin.\r\n// Or set it to a legal value for `vertical-align` to change the default.\r\n$inline-block-alignment: middle !default;\r\n\r\n// Provides a cross-browser method to implement `display: inline-block;`\r\n@mixin inline-block($alignment: $inline-block-alignment) {\r\n  @if $legacy-support-for-mozilla {\r\n    display: -moz-inline-stack;\r\n  }\r\n  display: inline-block;\r\n  @if $alignment and $alignment != none {\r\n    vertical-align: $alignment;\r\n  }\r\n  @if $legacy-support-for-ie {\r\n    *vertical-align: auto;\r\n    zoom: 1;\r\n    *display: inline;\r\n  }\r\n}\r\n","@import \"../support\";\r\n\r\n// This mixin provides basic support for CSS3 properties and\r\n// their corresponding experimental CSS2 properties when\r\n// the implementations are identical except for the property\r\n// prefix.\r\n@mixin experimental($property, $value,\r\n  $moz      : $experimental-support-for-mozilla,\r\n  $webkit   : $experimental-support-for-webkit,\r\n  $o        : $experimental-support-for-opera,\r\n  $ms       : $experimental-support-for-microsoft,\r\n  $khtml    : $experimental-support-for-khtml,\r\n  $official : true\r\n) {\r\n  @if $webkit  and $experimental-support-for-webkit    { -webkit-#{$property} : $value; }\r\n  @if $khtml   and $experimental-support-for-khtml     {  -khtml-#{$property} : $value; }\r\n  @if $moz     and $experimental-support-for-mozilla   {    -moz-#{$property} : $value; }\r\n  @if $ms      and $experimental-support-for-microsoft {     -ms-#{$property} : $value; }\r\n  @if $o       and $experimental-support-for-opera     {      -o-#{$property} : $value; }\r\n  @if $official                                        {         #{$property} : $value; }\r\n}\r\n\r\n// Same as experimental(), but for cases when the property is the same and the value is vendorized\r\n@mixin experimental-value($property, $value,\r\n  $moz      : $experimental-support-for-mozilla,\r\n  $webkit   : $experimental-support-for-webkit,\r\n  $o        : $experimental-support-for-opera,\r\n  $ms       : $experimental-support-for-microsoft,\r\n  $khtml    : $experimental-support-for-khtml,\r\n  $official : true\r\n) {\r\n  @if $webkit  and $experimental-support-for-webkit    { #{$property} : -webkit-#{$value}; }\r\n  @if $khtml   and $experimental-support-for-khtml     { #{$property} :  -khtml-#{$value}; }\r\n  @if $moz     and $experimental-support-for-mozilla   { #{$property} :    -moz-#{$value}; }\r\n  @if $ms      and $experimental-support-for-microsoft { #{$property} :     -ms-#{$value}; }\r\n  @if $o       and $experimental-support-for-opera     { #{$property} :      -o-#{$value}; }\r\n  @if $official                                        { #{$property} :         #{$value}; }\r\n}\r\n","@import \"text/ellipsis\";\r\n@import \"text/nowrap\";\r\n@import \"text/replacement\";\r\n@import \"text/force-wrap\";\r\n","@import \"../../css3/shared\";\r\n\r\n// To get full firefox support, you must install the ellipsis pattern:\r\n//\r\n//     compass install compass/ellipsis\r\n$use-mozilla-ellipsis-binding: false !default;\r\n\r\n// This technique, by [Justin Maxwell](http://code404.com/), was originally\r\n// published [here](http://mattsnider.com/css/css-string-truncation-with-ellipsis/).\r\n// Firefox implementation by [Rikkert Koppes](http://www.rikkertkoppes.com/thoughts/2008/6/).\r\n@mixin ellipsis($no-wrap: true) {\r\n  @if $no-wrap { white-space: nowrap; }\r\n  overflow: hidden;\r\n  @include experimental(text-overflow, ellipsis,\r\n    not(-moz),\r\n    not(-webkit),\r\n    -o,\r\n    -ms,\r\n    not(-khtml),\r\n    official\r\n  );\r\n  @if $experimental-support-for-mozilla and $use-mozilla-ellipsis-binding {\r\n    -moz-binding: stylesheet-url(unquote(\"xml/ellipsis.xml#ellipsis\"));\r\n  }\r\n}\r\n","// When remembering whether or not there's a hyphen in white-space is too hard\r\n@mixin nowrap { white-space: nowrap; }\r\n","// Indicates the direction you prefer to move your text\r\n// when hiding it.\r\n//\r\n// `left` is more robust, especially in older browsers.\r\n// `right` seems have better runtime performance.\r\n$hide-text-direction: left !default;\r\n\r\n// Hides html text and replaces it with an image.\r\n// If you use this on an inline element, you will need to change the display to block or inline-block.\r\n// Also, if the size of the image differs significantly from the font size, you'll need to set the width and/or height.\r\n//\r\n// Parameters:\r\n//\r\n// * `img` -- the relative path from the project image directory to the image, or a url literal.\r\n// * `x` -- the x position of the background image.\r\n// * `y` -- the y position of the background image.\r\n@mixin replace-text($img, $x: 50%, $y: 50%) {\r\n  @include hide-text;\r\n  background: {\r\n    @if is-url($img) {\r\n      image: $img;\r\n    } @else {\r\n      image: image-url($img);\r\n    }\r\n    repeat: no-repeat;\r\n    position: $x $y;\r\n  };\r\n}\r\n\r\n// Like the `replace-text` mixin, but also sets the width\r\n// and height of the element according the dimensions of the image.\r\n//\r\n// If you set `$inline` to true, then an inline image (data uri) will be used.\r\n@mixin replace-text-with-dimensions($img, $x: 50%, $y: 50%, $inline: false) {\r\n  @include replace-text(if($inline, inline-image($img), $img), $x, $y);\r\n  width: image-width($img);\r\n  height: image-height($img);\r\n}\r\n\r\n// Hides text in an element so you can see the background.\r\n//\r\n// The direction indicates how the text should be moved out of view.\r\n//\r\n// See `$hide-text-direction` for more information and to set this globally\r\n// for your application.\r\n@mixin hide-text($direction: $hide-text-direction) {\r\n  @if $direction == left {\r\n    $approximate-em-value: 12px / 1em;\r\n    $wider-than-any-screen: -9999em;\r\n    text-indent: $wider-than-any-screen * $approximate-em-value;\r\n    overflow: hidden;\r\n    text-align: left;\r\n  } @else {\r\n    // slightly wider than the box prevents issues with inline-block elements\r\n    text-indent: 110%;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n  }\r\n}\r\n\r\n// Hides text in an element by squishing the text into oblivion.\r\n// Use this if you need to hide text contained in an inline element\r\n// but still have it read by a screen reader.\r\n@mixin squish-text {\r\n  font: 0/0 serif;\r\n  text-shadow: none;\r\n  color: transparent;\r\n}\r\n","// Prevent long urls and text from breaking layouts\r\n// [originally from perishablepress.com](http://perishablepress.com/press/2010/06/01/wrapping-content/)\r\n@mixin force-wrap {\r\n  white-space: pre;           // CSS 2.0\r\n  white-space: pre-wrap;      // CSS 2.1\r\n  white-space: pre-line;      // CSS 3.0\r\n  white-space: -pre-wrap;     // Opera 4-6\r\n  white-space: -o-pre-wrap;   // Opera 7\r\n  white-space: -moz-pre-wrap; // Mozilla\r\n  white-space: -hp-pre-wrap;  // HP Printers\r\n  word-wrap: break-word;      // IE 5+\r\n}\r\n","@import \"typography/links\";\r\n@import \"typography/lists\";\r\n@import \"typography/text\";\r\n@import \"typography/vertical_rhythm\";\r\n","@import \"../layout/grid-background\";\r\n\r\n// The base font size.\r\n$base-font-size: 16px !default;\r\n\r\n// The base line height determines the basic unit of vertical rhythm.\r\n$base-line-height: 24px !default;\r\n\r\n// Set the default border style for rhythm borders.\r\n$default-rhythm-border-style: solid !default;\r\n\r\n// The default font size in all browsers.\r\n$browser-default-font-size: 16px;\r\n\r\n// Set to false if you want to use absolute pixels in sizing your typography.\r\n$relative-font-sizing: true !default;\r\n\r\n// Allows the `adjust-font-size-to` mixin and the `lines-for-font-size` function\r\n// to round the line height to the nearest half line height instead of the\r\n// nearest integral line height to avoid large spacing between lines.\r\n$round-to-nearest-half-line: false !default;\r\n\r\n// Ensure there is at least this many pixels\r\n// of vertical padding above and below the text.\r\n$min-line-padding: 2px !default;\r\n\r\n// $base-font-size but in your output unit of choice.\r\n// Defaults to 1em when `$relative-font-sizing` is true.\r\n$font-unit: if($relative-font-sizing, 1em, $base-font-size) !default;\r\n\r\n// The basic unit of font rhythm.\r\n$base-rhythm-unit: $base-line-height / $base-font-size * $font-unit;\r\n\r\n// The leader is the amount of whitespace in a line.\r\n// It might be useful in your calculations.\r\n$base-leader: ($base-line-height - $base-font-size) * $font-unit / $base-font-size;\r\n\r\n// The half-leader is the amount of whitespace above and below a line.\r\n// It might be useful in your calculations.\r\n$base-half-leader: $base-leader / 2;\r\n\r\n// True if a number has a relative unit.\r\n@function relative-unit($number) {\r\n  @return unit($number) == \"%\" or unit($number) == \"em\" or unit($number) == \"rem\"\r\n}\r\n\r\n// True if a number has an absolute unit.\r\n@function absolute-unit($number) {\r\n  @return not(relative-unit($number) or unitless($number));\r\n}\r\n\r\n@if $relative-font-sizing and not(relative-unit($font-unit)) {\r\n  @warn \"$relative-font-sizing is true but $font-unit is set to #{$font-unit} which is not a relative unit.\";\r\n}\r\n\r\n// Establishes a font baseline for the given font-size.\r\n@mixin establish-baseline($font-size: $base-font-size) {\r\n  // IE 6 refuses to resize fonts set in pixels and it weirdly resizes fonts\r\n  // whose root is set in ems. So we set the root font size in percentages of\r\n  // the default font size.\r\n  * html {\r\n    font-size: 100% * ($font-size / $browser-default-font-size);\r\n  }\r\n  html {\r\n    font-size: $font-size;\r\n    @include adjust-leading-to(1, if($relative-font-sizing, $font-size, $base-font-size));\r\n  }\r\n}\r\n\r\n// Resets the line-height to 1 vertical rhythm unit.\r\n// Does not work on elements whose font-size is different from $base-font-size.\r\n//\r\n// @deprecated This mixin will be removed in the next release.\r\n// Please use the `adjust-leading-to` mixin instead.\r\n@mixin reset-baseline {\r\n  @include adjust-leading-to(1, if($relative-font-sizing, $base-font-size, $base-font-size));\r\n}\r\n\r\n// Show a background image that can be used to debug your alignments.\r\n// Include the $img argument if you would rather use your own image than the\r\n// Compass default gradient image.\r\n@mixin debug-vertical-alignment($img: false) {\r\n  @if $img {\r\n    background: image-url($img);\r\n  } @else {\r\n    @include baseline-grid-background($base-rhythm-unit);\r\n  }\r\n}\r\n\r\n// Adjust a block to have a different font size and line height to maintain the\r\n// rhythm. $lines specifies how many multiples of the baseline rhythm each line\r\n// of this font should use up. It does not have to be an integer, but it\r\n// defaults to the smallest integer that is large enough to fit the font.\r\n// Use $from-size to adjust from a font-size other than the base font-size.\r\n@mixin adjust-font-size-to($to-size, $lines: lines-for-font-size($to-size), $from-size: $base-font-size) {\r\n  @if not($relative-font-sizing) and $from-size != $base-font-size {\r\n    @warn \"$relative-font-sizing is false but a relative font size was passed to adjust-font-size-to\";\r\n  }\r\n  font-size: $font-unit * $to-size / $from-size;\r\n  @include adjust-leading-to($lines, if($relative-font-sizing, $to-size, $base-font-size));\r\n}\r\n\r\n// Adjust a block to have different line height to maintain the rhythm.\r\n// $lines specifies how many multiples of the baseline rhythm each line of this\r\n// font should use up. It does not have to be an integer, but it defaults to the\r\n// smallest integer that is large enough to fit the font.\r\n@mixin adjust-leading-to($lines, $font-size: $base-font-size) {\r\n  line-height: rhythm($lines, $font-size);\r\n}\r\n\r\n// Calculate rhythm units.\r\n@function rhythm(\r\n  $lines: 1,\r\n  $font-size: $base-font-size,\r\n  $offset: 0\r\n) {\r\n  @if not($relative-font-sizing) and $font-size != $base-font-size {\r\n    @warn \"$relative-font-sizing is false but a relative font size was passed to the rhythm function\";\r\n  }\r\n  $rhythm: $font-unit * ($lines * $base-line-height - $offset) / $font-size;\r\n  // Round the pixels down to nearest integer.\r\n  @if unit($rhythm) == px {\r\n    $rhythm: floor($rhythm);\r\n  }\r\n  @return $rhythm;\r\n}\r\n\r\n// Calculate the minimum multiple of rhythm units needed to contain the font-size.\r\n@function lines-for-font-size($font-size) {\r\n  $lines: if($round-to-nearest-half-line,\r\n              ceil(2 * $font-size / $base-line-height) / 2,\r\n              ceil($font-size / $base-line-height));\r\n  @if $lines * $base-line-height - $font-size < $min-line-padding * 2 {\r\n    $lines: $lines + if($round-to-nearest-half-line, 0.5, 1);\r\n  }\r\n  @return $lines;\r\n}\r\n\r\n// Apply leading whitespace. The $property can be margin or padding.\r\n@mixin leader($lines: 1, $font-size: $base-font-size, $property: margin) {\r\n  #{$property}-top: rhythm($lines, $font-size);\r\n}\r\n\r\n// Apply leading whitespace as padding.\r\n@mixin padding-leader($lines: 1, $font-size: $base-font-size) {\r\n  padding-top: rhythm($lines, $font-size);\r\n}\r\n\r\n// Apply leading whitespace as margin.\r\n@mixin margin-leader($lines: 1, $font-size: $base-font-size) {\r\n  margin-top: rhythm($lines, $font-size);\r\n}\r\n\r\n// Apply trailing whitespace. The $property can be margin or padding.\r\n@mixin trailer($lines: 1, $font-size: $base-font-size, $property: margin) {\r\n  #{$property}-bottom: rhythm($lines, $font-size);\r\n}\r\n\r\n// Apply trailing whitespace as padding.\r\n@mixin padding-trailer($lines: 1, $font-size: $base-font-size) {\r\n  padding-bottom: rhythm($lines, $font-size);\r\n}\r\n\r\n// Apply trailing whitespace as margin.\r\n@mixin margin-trailer($lines: 1, $font-size: $base-font-size) {\r\n  margin-bottom: rhythm($lines, $font-size);\r\n}\r\n\r\n// Shorthand mixin to apply whitespace for top and bottom margins and padding.\r\n@mixin rhythm($leader: 0, $padding-leader: 0, $padding-trailer: 0, $trailer: 0, $font-size: $base-font-size) {\r\n  @include leader($leader, $font-size);\r\n  @include padding-leader($padding-leader, $font-size);\r\n  @include padding-trailer($padding-trailer, $font-size);\r\n  @include trailer($trailer, $font-size);\r\n}\r\n\r\n// Apply a border and whitespace to any side without destroying the vertical\r\n// rhythm. The whitespace must be greater than the width of the border.\r\n@mixin apply-side-rhythm-border($side, $width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\r\n  @if not($relative-font-sizing) and $font-size != $base-font-size {\r\n    @warn \"$relative-font-sizing is false but a relative font size was passed to apply-side-rhythm-border\";\r\n  }\r\n  border-#{$side}: {\r\n    style: $border-style;\r\n    width: $font-unit * $width / $font-size;\r\n  };\r\n  padding-#{$side}: rhythm($lines, $font-size, $offset: $width);\r\n}\r\n\r\n// Apply borders and whitespace equally to all sides.\r\n@mixin rhythm-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\r\n  @if not($relative-font-sizing) and $font-size != $base-font-size {\r\n    @warn \"$relative-font-sizing is false but a relative font size was passed to rhythm-borders\";\r\n  }\r\n  border: {\r\n    style: $border-style;\r\n    width: $font-unit * $width / $font-size;\r\n  };\r\n  padding: rhythm($lines, $font-size, $offset: $width);\r\n}\r\n\r\n// Apply a leading border.\r\n@mixin leading-border($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\r\n  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);\r\n}\r\n\r\n// Apply a trailing border.\r\n@mixin trailing-border($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\r\n  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);\r\n}\r\n\r\n// Apply both leading and trailing borders.\r\n@mixin horizontal-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\r\n  @include leading-border($width, $lines, $font-size, $border-style);\r\n  @include trailing-border($width, $lines, $font-size, $border-style);\r\n}\r\n\r\n// Alias for `horizontal-borders` mixin.\r\n@mixin h-borders($width: 1px, $lines: 1, $font-size: $base-font-size, $border-style: $default-rhythm-border-style) {\r\n  @include horizontal-borders($width, $lines, $font-size, $border-style);\r\n}\r\n","@import \"../css3/images\";\r\n@import \"../css3/background-size\";\r\n\r\n// Set the color of your columns\r\n$grid-background-column-color     : rgba(100, 100, 225, 0.25)   !default;\r\n// Set the color of your gutters\r\n$grid-background-gutter-color     : rgba(0, 0, 0, 0)            !default;\r\n\r\n// Set the total number of columns in your grid\r\n$grid-background-total-columns    : 24                          !default;\r\n// Set the width of your columns\r\n$grid-background-column-width     : 30px                        !default;\r\n// Set the width of your gutters\r\n$grid-background-gutter-width     : 10px                        !default;\r\n// Set the offset, if your columns are padded in from the container edge\r\n$grid-background-offset           : 0px                         !default;\r\n\r\n// Set the color of your baseline\r\n$grid-background-baseline-color   : rgba(0, 0, 0, 0.5)          !default;\r\n// Set the height of your baseline grid\r\n$grid-background-baseline-height  : 1.5em                       !default;\r\n\r\n// toggle your columns grids on and off\r\n$show-column-grid-backgrounds     : true                        !default;\r\n// toggle your vertical grids on and off\r\n$show-baseline-grid-backgrounds   : true                        !default;\r\n// toggle all your grids on and off\r\n$show-grid-backgrounds            : true                        !default;\r\n\r\n// optionally force your grid-image to remain fluid\r\n// no matter what units you used to declared your grid.\r\n$grid-background-force-fluid      : false                       !default;\r\n\r\n\r\n// Create the gradient needed for baseline grids\r\n@function get-baseline-gradient(\r\n  $color : $grid-background-baseline-color\r\n) {\r\n  $gradient: linear-gradient(bottom, $color 5%, rgba($color,0) 5%);\r\n  @return $gradient;\r\n}\r\n\r\n// Create the color-stops needed for horizontal grids\r\n@function build-grid-background(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color\r\n) {\r\n  $grid: compact();\r\n  $grid: append($grid, $gutter-color $offset, comma);\r\n  @for $i from 0 to $total {\r\n\r\n    // $a represents the start of this column, initially equal to the offset\r\n    $a: $offset;\r\n    @if $i > 0 { $a: $a + (($column + $gutter) * $i); }\r\n\r\n    // $g represents the start of this gutter, equal to $a plus one column-width\r\n    $g: $a + $column;\r\n\r\n    // $z represents the end of a gutter, equal to $g plus one gutter-width\r\n    $z: $g + $gutter;\r\n\r\n    @if (unit($a) == \"%\") and ($i == ($total - 1)) {\r\n      $z: 100%;\r\n    }\r\n\r\n    // and we add this column/gutter pair to our grid\r\n    $grid: join($grid, ($column-color $a, $column-color $g, $gutter-color $g, $gutter-color $z));\r\n  }\r\n\r\n  @return $grid;\r\n}\r\n\r\n// Return the gradient needed for horizontal grids\r\n@function get-column-gradient(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color,\r\n  $force-fluid    : $grid-background-force-fluid\r\n) {\r\n  $grid: unquote(\"\");\r\n\r\n  // don't force fluid grids when they are already fluid.\r\n  @if unit($column) == \"%\" { $force-fluid: false; }\r\n\r\n  @if $force-fluid {\r\n    $grid: get-column-fluid-grid($total,$column,$gutter,$offset,$column-color,$gutter-color);\r\n  } @else {\r\n    $grid: build-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color);\r\n  }\r\n\r\n  // return the horizontal grid as a gradient\r\n  $gradient: linear-gradient(left, $grid);\r\n  @return $gradient;\r\n}\r\n\r\n// Convert a grid from fixed units into percentages.\r\n@function get-column-fluid-grid(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color\r\n) {\r\n  $context: ($column * $total) + ($gutter * ($total - 1) + ($offset * 2));\r\n  $offset: $offset / $context * 100%;\r\n  $column: $column / $context * 100%;\r\n  $gutter: $gutter / $context * 100%;\r\n\r\n  // return the horizontal grid as a set of color-stops\r\n  $grid: build-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color);\r\n  @return $grid;\r\n}\r\n\r\n\r\n// Add just the baseline grid to an element's background\r\n@mixin baseline-grid-background(\r\n  $baseline : $grid-background-baseline-height,\r\n  $color    : $grid-background-baseline-color\r\n) {\r\n  @if $show-grid-backgrounds and $show-baseline-grid-backgrounds {\r\n    @include background-image(get-baseline-gradient($color));\r\n    @include background-size(100% $baseline);\r\n    background-position: left top;\r\n  }\r\n}\r\n\r\n// Add just the horizontal grid to an element's background\r\n@mixin column-grid-background(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color,\r\n  $force-fluid    : $grid-background-force-fluid\r\n) {\r\n  @if $show-grid-backgrounds and $show-column-grid-backgrounds {\r\n    @include background-image(\r\n      get-column-gradient($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid)\r\n    );\r\n    background-position: left top;\r\n  }\r\n}\r\n\r\n// Add both horizontal and baseline grids to an element's background\r\n@mixin grid-background(\r\n  $total          : $grid-background-total-columns,\r\n  $column         : $grid-background-column-width,\r\n  $gutter         : $grid-background-gutter-width,\r\n  $baseline       : $grid-background-baseline-height,\r\n  $offset         : $grid-background-offset,\r\n  $column-color   : $grid-background-column-color,\r\n  $gutter-color   : $grid-background-gutter-color,\r\n  $baseline-color : $grid-background-baseline-color,\r\n  $force-fluid    : $grid-background-force-fluid\r\n) {\r\n  @if $show-grid-backgrounds {\r\n    @if $show-baseline-grid-backgrounds and $show-column-grid-backgrounds {\r\n      @include background-image(\r\n        get-baseline-gradient($baseline-color),\r\n        get-column-gradient($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid)\r\n      );\r\n      @include background-size(100% $baseline, auto);\r\n      background-position: left top;\r\n    } @else {\r\n      @include baseline-grid-background($baseline, $baseline-color);\r\n      @include column-grid-background($total,$column,$gutter,$offset,$column-color,$gutter-color, $force-fluid);\r\n    }\r\n  }\r\n}\r\n","@import \"shared\";\r\n@import \"../utilities/general/hacks\";\r\n\r\n// Background property support for vendor prefixing within values.\r\n@mixin background(\r\n  $background-1,\r\n  $background-2: false,\r\n  $background-3: false,\r\n  $background-4: false,\r\n  $background-5: false,\r\n  $background-6: false,\r\n  $background-7: false,\r\n  $background-8: false,\r\n  $background-9: false,\r\n  $background-10: false\r\n) {\r\n  $backgrounds: compact($background-1, $background-2, $background-3, $background-4, $background-5,\r\n                        $background-6, $background-7, $background-8, $background-9, $background-10);\r\n  $mult-bgs: -compass-list-size($backgrounds) > 1;\r\n  $add-pie-bg: prefixed(-pie,   $backgrounds) or $mult-bgs;\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $backgrounds) {      background:    -svg($backgrounds); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $backgrounds) {      background:    -owg($backgrounds); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $backgrounds) {      background: -webkit($backgrounds); }\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $backgrounds) {      background:    -moz($backgrounds); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $backgrounds) {      background:      -o($backgrounds); }\r\n  @if $experimental-support-for-pie          and $add-pie-bg                     { -pie-background:    -pie($backgrounds); }\r\n                                                                                        background:         $backgrounds ;\r\n}\r\n\r\n@mixin background-with-css2-fallback(\r\n  $background-1,\r\n  $background-2: false,\r\n  $background-3: false,\r\n  $background-4: false,\r\n  $background-5: false,\r\n  $background-6: false,\r\n  $background-7: false,\r\n  $background-8: false,\r\n  $background-9: false,\r\n  $background-10: false\r\n) {\r\n  $backgrounds: compact($background-1, $background-2, $background-3, $background-4, $background-5,\r\n                        $background-6, $background-7, $background-8, $background-9, $background-10);\r\n  $mult-bgs: -compass-list-size($backgrounds) > 1;\r\n  $simple-background: if($mult-bgs or prefixed(-css2, $backgrounds), -css2(-compass-nth($backgrounds, last)), false);\r\n  @if not(blank($simple-background)) { background: $simple-background; }\r\n  @include background($background-1, $background-2, $background-3, $background-4, $background-5,\r\n                      $background-6, $background-7, $background-8, $background-9, $background-10);\r\n}\r\n\r\n\r\n// Background image property support for vendor prefixing within values.\r\n@mixin background-image(\r\n  $image-1,\r\n  $image-2: false,\r\n  $image-3: false,\r\n  $image-4: false,\r\n  $image-5: false,\r\n  $image-6: false,\r\n  $image-7: false,\r\n  $image-8: false,\r\n  $image-9: false,\r\n  $image-10: false\r\n) {\r\n  $images: compact($image-1, $image-2, $image-3, $image-4, $image-5, $image-6, $image-7, $image-8, $image-9, $image-10);\r\n  $add-pie-bg: prefixed(-pie,   $images) or -compass-list-size($images) > 1;\r\n\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $images) { background-image:    -svg($images); background-size: 100%; }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $images) { background-image:    -owg($images); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $images) { background-image: -webkit($images); }\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $images) { background-image:    -moz($images); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $images) { background-image:      -o($images); }\r\n  @if $experimental-support-for-pie          and $add-pie-bg                { @warn \"PIE does not support background-image. Use @include background(#{$images}) instead.\" }\r\n                                                                              background-image:         $images ;\r\n}\r\n\r\n// Emit a IE-Specific filters that renders a simple linear gradient.\r\n// For use in IE 6 - 8. Best practice would have you apply this via a\r\n// conditional IE stylesheet, but if you must, you should place this before\r\n// any background-image properties that you have specified.\r\n//\r\n// For the `$orientation` parameter, you can pass `vertical` or `horizontal`.\r\n@mixin filter-gradient($start-color, $end-color, $orientation: vertical) {\r\n  @include has-layout;\r\n  $gradient-type: if($orientation == vertical, 0, 1);\r\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8 {\r\n    filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');\r\n  }\r\n}\r\n\r\n\r\n// Border image property support for vendor prefixing properties and values.\r\n@mixin border-image($value) {\r\n  @if $experimental-support-for-mozilla      {    -moz-border-image:    -moz(reject(-compass-list($value), fill)); }\r\n  @if $support-for-original-webkit-gradients { -webkit-border-image:    -owg(reject(-compass-list($value), fill)); }\r\n  @if $experimental-support-for-webkit       { -webkit-border-image: -webkit(reject(-compass-list($value), fill)); }\r\n  @if $experimental-support-for-opera        {      -o-border-image:      -o(reject(-compass-list($value), fill)); }\r\n  @if $experimental-support-for-svg          {         border-image:    -svg(reject(-compass-list($value), fill)); }\r\n                                                       border-image:                              $value;\r\n}\r\n\r\n// List style image property support for vendor prefixing within values.\r\n@mixin list-style-image($image) {\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $image) { list-style-image:    -moz($image); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $image) { list-style-image:    -owg($image); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $image) { list-style-image: -webkit($image); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $image) { list-style-image:      -o($image); }\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $image) { list-style-image:    -svg($image); }\r\n                                                                             list-style-image:         $image ;\r\n}\r\n\r\n// List style property support for vendor prefixing within values.\r\n@mixin list-style($value) {\r\n  $value: -compass-list($value);\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $value) { list-style-image:    -moz($value); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $value) { list-style-image:    -owg($value); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $value) { list-style-image: -webkit($value); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $value) { list-style-image:      -o($value); }\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $value) { list-style-image:    -svg($value); }\r\n                                                                             list-style-image:         $value ;\r\n}\r\n\r\n// content property support for vendor prefixing within values.\r\n@mixin content($value) {\r\n  $value: -compass-list($value);\r\n  @if $experimental-support-for-mozilla      and prefixed(-moz,    $value) { content:    -moz($value); }\r\n  @if $support-for-original-webkit-gradients and prefixed(-owg,    $value) { content:    -owg($value); }\r\n  @if $experimental-support-for-webkit       and prefixed(-webkit, $value) { content: -webkit($value); }\r\n  @if $experimental-support-for-opera        and prefixed(-o,      $value) { content:      -o($value); }\r\n  @if $experimental-support-for-svg          and prefixed(-svg,    $value) { content:    -svg($value); }\r\n                                                                             content:         $value ;\r\n}\r\n","@import \"shared\";\r\n\r\n//  override to change the default\r\n$default-background-size: 100% auto !default;\r\n\r\n// Set the size of background images using px, width and height, or percentages.\r\n// Currently supported in: Opera, Gecko, Webkit.\r\n//\r\n// * percentages are relative to the background-origin (default = padding-box)\r\n// * mixin defaults to: `$default-background-size`\r\n@mixin background-size(\r\n  $size-1: $default-background-size,\r\n  $size-2: false,\r\n  $size-3: false,\r\n  $size-4: false,\r\n  $size-5: false,\r\n  $size-6: false,\r\n  $size-7: false,\r\n  $size-8: false,\r\n  $size-9: false,\r\n  $size-10: false\r\n) {\r\n  $size-1: if(type-of($size-1) == string, unquote($size-1), $size-1);\r\n  $sizes: compact($size-1, $size-2, $size-3, $size-4, $size-5, $size-6, $size-7, $size-8, $size-9, $size-10);\r\n  @include experimental(background-size, $sizes, -moz, -webkit, -o, not(-ms), not(-khtml));\r\n}\r\n","@import \"css3/border-radius\";\r\n@import \"css3/inline-block\";\r\n@import \"css3/opacity\";\r\n@import \"css3/box-shadow\";\r\n@import \"css3/text-shadow\";\r\n@import \"css3/columns\";\r\n@import \"css3/box-sizing\";\r\n@import \"css3/box\";\r\n@import \"css3/images\";\r\n@import \"css3/background-clip\";\r\n@import \"css3/background-origin\";\r\n@import \"css3/background-size\";\r\n@import \"css3/font-face\";\r\n@import \"css3/transform\";\r\n@import \"css3/transition\";\r\n@import \"css3/appearance\";\r\n@import \"css3/regions\";\r\n@import \"css3/hyphenation\";\r\n@import \"css3/filter\";\r\n","@import \"shared\";\r\n\r\n$default-border-radius: 5px !default;\r\n\r\n// Round all corners by a specific amount, defaults to value of `$default-border-radius`.\r\n//\r\n// When two values are passed, the first is the horizontal radius\r\n// and the second is the vertical radius.\r\n//\r\n// Note: webkit does not support shorthand syntax for several corners at once.\r\n// So in the case where you pass several values only the first will be passed to webkit.\r\n//\r\n// Examples:\r\n//\r\n//     .simple   { @include border-radius(4px, 4px); }\r\n//     .compound { @include border-radius(2px 5px, 3px 6px); }\r\n//     .crazy    { @include border-radius(1px 3px 5px 7px, 2px 4px 6px 8px)}\r\n//\r\n// Which generates:\r\n//\r\n//    .simple {\r\n//      -webkit-border-radius: 4px 4px;\r\n//      -moz-border-radius: 4px / 4px;\r\n//      -khtml-border-radius: 4px / 4px;\r\n//      border-radius: 4px / 4px; }\r\n//    \r\n//    .compound {\r\n//      -webkit-border-radius: 2px 3px;\r\n//      -moz-border-radius: 2px 5px / 3px 6px;\r\n//      -khtml-border-radius: 2px 5px / 3px 6px;\r\n//      border-radius: 2px 5px / 3px 6px; }\r\n//    \r\n//    .crazy {\r\n//      -webkit-border-radius: 1px 2px;\r\n//      -moz-border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px;\r\n//      -khtml-border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px;\r\n//      border-radius: 1px 3px 5px 7px / 2px 4px 6px 8px; }\r\n\r\n@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {\r\n\r\n  @if $vertical-radius {\r\n    // Webkit doesn't understand the official shorthand syntax for specifying\r\n    // a vertical radius unless so in case there's several we only take the first.\r\n    @include experimental(border-radius, first-value-of($radius) first-value-of($vertical-radius),\r\n      not(-moz),\r\n      -webkit,\r\n      not(-o),\r\n      not(-ms),\r\n      not(-khtml),\r\n      not official\r\n    );\r\n    @include experimental(\"border-radius\", $radius unquote(\"/\") $vertical-radius,\r\n      -moz,\r\n      not(-webkit),\r\n      not(-o),\r\n      not(-ms),\r\n      -khtml,\r\n      official\r\n    );\r\n  }\r\n  @else {\r\n    @include experimental(border-radius, $radius);\r\n  }\r\n}\r\n\r\n// Round radius at position by amount.\r\n//\r\n// * legal values for `$vert`: `top`, `bottom`\r\n// * legal values for `$horz`: `left`, `right`\r\n\r\n@mixin border-corner-radius($vert, $horz, $radius: $default-border-radius) {\r\n  // Support for mozilla's syntax for specifying a corner\r\n  @include experimental(\"border-radius-#{$vert}#{$horz}\", $radius,\r\n    -moz,\r\n    not(-webkit),\r\n    not(-o),\r\n    not(-ms),\r\n    not(-khtml),\r\n    not official\r\n  );\r\n  @include experimental(\"border-#{$vert}-#{$horz}-radius\", $radius,\r\n    not(-moz),\r\n    -webkit,\r\n    not(-o),\r\n    not(-ms),\r\n    -khtml,\r\n    official\r\n  );\r\n  \r\n}\r\n\r\n// Round top-left corner only\r\n\r\n@mixin border-top-left-radius($radius: $default-border-radius) {\r\n  @include border-corner-radius(top, left, $radius); }\r\n\r\n// Round top-right corner only\r\n\r\n@mixin border-top-right-radius($radius: $default-border-radius) {\r\n  @include border-corner-radius(top, right, $radius); }\r\n\r\n// Round bottom-left corner only\r\n\r\n@mixin border-bottom-left-radius($radius: $default-border-radius) {\r\n  @include border-corner-radius(bottom, left, $radius); }\r\n\r\n// Round bottom-right corner only\r\n\r\n@mixin border-bottom-right-radius($radius: $default-border-radius) {\r\n  @include border-corner-radius(bottom, right, $radius); }\r\n\r\n// Round both top corners by amount\r\n@mixin border-top-radius($radius: $default-border-radius) {\r\n  @include border-top-left-radius($radius);\r\n  @include border-top-right-radius($radius); }\r\n\r\n// Round both right corners by amount\r\n@mixin border-right-radius($radius: $default-border-radius) {\r\n  @include border-top-right-radius($radius);\r\n  @include border-bottom-right-radius($radius); }\r\n\r\n// Round both bottom corners by amount\r\n@mixin border-bottom-radius($radius: $default-border-radius) {\r\n  @include border-bottom-left-radius($radius);\r\n  @include border-bottom-right-radius($radius); }\r\n\r\n// Round both left corners by amount\r\n@mixin border-left-radius($radius: $default-border-radius) {\r\n  @include border-top-left-radius($radius);\r\n  @include border-bottom-left-radius($radius); }\r\n","@import \"shared\";\r\n\r\n// Provides cross-browser CSS opacity. Takes a number between 0 and 1 as the argument, e.g. 0.5 for 50% opacity.\r\n//\r\n//     @param $opacity\r\n//         A number between 0 and 1, where 0 is transparent and 1 is opaque.\r\n\r\n@mixin opacity($opacity) {\r\n  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8 {\r\n    filter: unquote(\"progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})\");\r\n  }\r\n  opacity: $opacity;\r\n}\r\n\r\n// Make an element completely transparent.\r\n@mixin transparent { @include opacity(0); }\r\n\r\n// Make an element completely opaque.\r\n@mixin opaque { @include opacity(1); }\r\n","// @doc off\r\n// These defaults make the arguments optional for this mixin\r\n// If you like, set different defaults before importing.\r\n// @doc on\r\n\r\n@import \"shared\";\r\n\r\n\r\n// The default color for box shadows\r\n$default-box-shadow-color: #333333 !default;\r\n\r\n// The default horizontal offset. Positive is to the right.\r\n$default-box-shadow-h-offset: 0px !default;\r\n\r\n// The default vertical offset. Positive is down.\r\n$default-box-shadow-v-offset: 0px !default;\r\n\r\n// The default blur length.\r\n$default-box-shadow-blur: 5px !default;\r\n\r\n// The default spread length.\r\n$default-box-shadow-spread : false !default;\r\n\r\n// The default shadow inset: inset or false (for standard shadow).\r\n$default-box-shadow-inset : false !default;\r\n\r\n// Provides cross-browser for Webkit, Gecko, and CSS3 box shadows when one or more box\r\n// shadows are needed.\r\n// Each shadow argument should adhere to the standard css3 syntax for the\r\n// box-shadow property.\r\n@mixin box-shadow(\r\n  $shadow-1 : default,\r\n  $shadow-2 : false,\r\n  $shadow-3 : false,\r\n  $shadow-4 : false,\r\n  $shadow-5 : false,\r\n  $shadow-6 : false,\r\n  $shadow-7 : false,\r\n  $shadow-8 : false,\r\n  $shadow-9 : false,\r\n  $shadow-10: false\r\n) {\r\n  @if $shadow-1 == default {\r\n    $shadow-1 : -compass-space-list(compact(if($default-box-shadow-inset, inset, false), $default-box-shadow-h-offset, $default-box-shadow-v-offset, $default-box-shadow-blur, $default-box-shadow-spread, $default-box-shadow-color));\r\n  }\r\n  $shadow : compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5, $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10);\r\n  @include experimental(box-shadow, $shadow,\r\n    -moz, -webkit, not(-o), not(-ms), not(-khtml), official\r\n  );\r\n}\r\n\r\n// Provides a single cross-browser CSS box shadow for Webkit, Gecko, and CSS3.\r\n// Includes default arguments for color, horizontal offset, vertical offset, blur length, spread length, and inset.\r\n@mixin single-box-shadow(\r\n  $color  : $default-box-shadow-color,\r\n  $hoff   : $default-box-shadow-h-offset,\r\n  $voff   : $default-box-shadow-v-offset,\r\n  $blur   : $default-box-shadow-blur,\r\n  $spread : $default-box-shadow-spread,\r\n  $inset  : $default-box-shadow-inset\r\n) {\r\n  @if not ($inset == true or $inset == false or $inset == inset) {\r\n    @warn \"$inset expected to be true or the inset keyword. Got #{$inset} instead. Using: inset\";\r\n  }\r\n\r\n  @if $color == none {\r\n    @include box-shadow(none);\r\n  } @else {\r\n    $full   : $hoff $voff;\r\n    @if $blur   { $full: $full $blur;   }\r\n    @if $spread { $full: $full $spread; }\r\n    @if $color  { $full: $full $color;  }\r\n    @if $inset  { $full: inset $full;   }\r\n    @include box-shadow($full);\r\n  }\r\n}\r\n","@import \"shared\";\r\n\r\n// These defaults make the arguments optional for this mixin\r\n// If you like, set different defaults in your project\r\n\r\n$default-text-shadow-color:    #aaa !default;\r\n$default-text-shadow-h-offset: 0px  !default;\r\n$default-text-shadow-v-offset: 0px  !default;\r\n$default-text-shadow-blur:     1px  !default;\r\n$default-text-shadow-spread:   false  !default;\r\n\r\n// Provides cross-browser text shadows when one or more shadows are needed.\r\n// Each shadow argument should adhere to the standard css3 syntax for the\r\n// text-shadow property.\r\n//\r\n// Note: if any shadow has a spread parameter, this will cause the mixin\r\n// to emit the shadow declaration twice, first without the spread,\r\n// then with the spread included. This allows you to progressively\r\n// enhance the browsers that do support the spread parameter.\r\n@mixin text-shadow(\r\n  $shadow-1 : default,\r\n  $shadow-2 : false,\r\n  $shadow-3 : false,\r\n  $shadow-4 : false,\r\n  $shadow-5 : false,\r\n  $shadow-6 : false,\r\n  $shadow-7 : false,\r\n  $shadow-8 : false,\r\n  $shadow-9 : false,\r\n  $shadow-10: false\r\n) {\r\n  @if $shadow-1 == default {\r\n    $shadow-1: compact($default-text-shadow-h-offset $default-text-shadow-v-offset $default-text-shadow-blur $default-text-shadow-spread $default-text-shadow-color);\r\n  }\r\n  $shadows-without-spread: join((),(),comma);\r\n  $shadows: join((),(),comma);\r\n  $has-spread: false;\r\n  @each $shadow in compact($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5,\r\n                           $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10) {\r\n    @if length($shadow) > 4 {\r\n      $has-spread: true;\r\n      $shadows-without-spread: append($shadows-without-spread, nth($shadow,1) nth($shadow,2) nth($shadow,3) nth($shadow,5));\r\n      $shadows: append($shadows, $shadow);\r\n    } else {\r\n      $shadows-without-spread: append($shadows-without-spread, $shadow);\r\n      $shadows: append($shadows, $shadow);\r\n    }\r\n  }\r\n  @if $has-spread {\r\n    text-shadow: $shadows-without-spread;\r\n  }\r\n  text-shadow: $shadows;\r\n}\r\n\r\n// Provides a single cross-browser CSS text shadow.\r\n//\r\n// Provides sensible defaults for the color, horizontal offset, vertical offset, blur, and spread\r\n// according to the configuration defaults above.\r\n@mixin single-text-shadow(\r\n  $hoff: false,\r\n  $voff: false,\r\n  $blur: false,\r\n  $spread: false,\r\n  $color: false\r\n) {\r\n  // A lot of people think the color comes first. It doesn't.\r\n  @if type-of($hoff) == color {\r\n    $temp-color: $hoff;\r\n    $hoff: $voff;\r\n    $voff: $blur;\r\n    $blur: $spread;\r\n    $spread: $color;\r\n    $color: $temp-color;\r\n  }\r\n  // Can't rely on default assignment with multiple supported argument orders.\r\n  $hoff:   if($hoff,   $hoff,   $default-text-shadow-h-offset);\r\n  $voff:   if($voff,   $voff,   $default-text-shadow-v-offset);\r\n  $blur:   if($blur,   $blur,   $default-text-shadow-blur    );\r\n  $spread: if($spread, $spread, $default-text-shadow-spread  );\r\n  $color:  if($color,  $color,  $default-text-shadow-color   );\r\n  // We don't need experimental support for this property.\r\n  @if $color == none or $hoff == none {\r\n    @include text-shadow(none);\r\n  } @else {\r\n    @include text-shadow(compact($hoff $voff $blur $spread $color));\r\n  }\r\n}\r\n","@import \"shared\";\r\n\r\n// Specify the shorthand `columns` property.\r\n//\r\n// Example:\r\n//\r\n//     @include columns(20em 2)\r\n@mixin columns($width-and-count) {\r\n  @include experimental(columns, $width-and-count,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Specify the number of columns\r\n@mixin column-count($count) {\r\n  @include experimental(column-count, $count,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Specify the gap between columns e.g. `20px`\r\n@mixin column-gap($width) {\r\n  @include experimental(column-gap, $width,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Specify the width of columns e.g. `100px`\r\n@mixin column-width($width) {\r\n  @include experimental(column-width, $width,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Specify the width of the rule between columns e.g. `1px`\r\n@mixin column-rule-width($width) {\r\n  @include experimental(column-rule-width, $width,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Specify the style of the rule between columns e.g. `dotted`.\r\n// This works like border-style.\r\n@mixin column-rule-style($style) {\r\n  @include experimental(column-rule-style, unquote($style),\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Specify the color of the rule between columns e.g. `blue`.\r\n// This works like border-color.\r\n@mixin column-rule-color($color) {\r\n  @include experimental(column-rule-color, $color,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Mixin encompassing all column rule properties\r\n// For example:\r\n//\r\n//     @include column-rule(1px, solid, #c00)\r\n//\r\n// Or the values can be space separated:\r\n//\r\n//     @include column-rule(1px solid #c00)\r\n@mixin column-rule($width, $style: false, $color: false) {\r\n  $full : -compass-space-list(compact($width, $style, $color));\r\n  @include experimental(column-rule, $full,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Mixin for setting column-break-before\r\n//\r\n// * legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\r\n//\r\n//  Example: \r\n//    h2.before {@include column-break-before(always);}\r\n//\r\n//  Which generates: \r\n//\r\n//  h2.before {    \r\n//    -webkit-column-break-before: always;\r\n//    column-break-before: always;}\r\n@mixin column-break-before($value: auto){\r\n   @include experimental(column-break-before, $value, not(-moz), -webkit, not(-o), not(-ms), not(-khtml), official );\r\n}\r\n\r\n// Mixin for setting column-break-after\r\n//\r\n// * legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\r\n//\r\n//  Example: \r\n//    h2.after {@include column-break-after(always); }\r\n//\r\n//  Which generates: \r\n//\r\n//  h2.after {\r\n//    -webkit-column-break-after: always;\r\n//    column-break-after: always; }\r\n@mixin column-break-after($value: auto){\r\n   @include experimental(column-break-after, $value, not(-moz), -webkit, not(-o), not(-ms), not(-khtml), official );\r\n}\r\n\r\n// Mixin for setting column-break-inside\r\n//\r\n// * legal values are auto, avoid, avoid-page, avoid-column\r\n//\r\n//  Example: \r\n//    h2.inside {@include column-break-inside();}\r\n//  Which generates: \r\n//  \r\n//  h2.inside {\r\n//    -webkit-column-break-inside: auto;\r\n//    column-break-inside: auto;}\r\n@mixin column-break-inside($value: auto){\r\n   @include experimental(column-break-inside, $value, not(-moz), -webkit, not(-o), not(-ms), not(-khtml), official );\r\n}\r\n\r\n// All-purpose mixin for setting column breaks.\r\n//\r\n// * legal values for $type : before, after, inside \r\n// * legal values for '$value' are dependent on $type\r\n//    * when $type = before, legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\r\n//    * when $type = after, legal values are auto, always, avoid, left, right, page, column, avoid-page, avoid-column\r\n//    * when $type = inside, legal values are auto, avoid, avoid-page, avoid-column\r\n//  \r\n//  Examples: \r\n//    h2.before {@include column-break(before, always);}\r\n//    h2.after {@include column-break(after, always); }\r\n//    h2.inside {@include column-break(inside); }\r\n//\r\n//  Which generates: \r\n//  h2.before {    \r\n//    -webkit-column-break-before: always;\r\n//    column-break-before: always;}\r\n//  \r\n//  h2.after {\r\n//    -webkit-column-break-after: always;\r\n//    column-break-after: always; }\r\n//\r\n//  h2.inside {\r\n//    -webkit-column-break-inside: auto;\r\n//    column-break-inside: auto;}\r\n \r\n@mixin column-break($type: before, $value: auto){\r\n   @include experimental(\"column-break-#{$type}\", $value, not(-moz), -webkit, not(-o), not(-ms), not(-khtml), official );\r\n}","@import \"shared\";\r\n\r\n// Change the box model for Mozilla, Webkit, IE8 and the future\r\n//\r\n// @param $bs\r\n//   [ content-box | border-box ]\r\n\r\n@mixin box-sizing($bs) {\r\n  $bs: unquote($bs);\r\n  @include experimental(box-sizing, $bs,\r\n    -moz, -webkit, not(-o), not(-ms), not(-khtml), official\r\n  );\r\n}\r\n","@import \"shared\";\r\n\r\n// display:box; must be used for any of the other flexbox mixins to work properly\r\n@mixin display-box {\r\n  @include experimental-value(display, box,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Default box orientation, assuming that the user wants something less block-like\r\n$default-box-orient: horizontal !default;\r\n\r\n// Box orientation [ horizontal | vertical | inline-axis | block-axis | inherit ]\r\n@mixin box-orient(\r\n  $orientation: $default-box-orient\r\n) {\r\n  $orientation : unquote($orientation);\r\n  @include experimental(box-orient, $orientation,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Default box-align\r\n$default-box-align: stretch !default;\r\n\r\n// Box align [ start | end | center | baseline | stretch ]\r\n@mixin box-align(\r\n  $alignment: $default-box-align\r\n) {\r\n  $alignment : unquote($alignment);\r\n  @include experimental(box-align, $alignment,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Default box flex\r\n$default-box-flex: 0 !default;\r\n\r\n// mixin which takes an int argument for box flex. Apply this to the children inside the box.\r\n//\r\n// For example: \"div.display-box > div.child-box\" would get the box flex mixin.\r\n@mixin box-flex(\r\n  $flex: $default-box-flex\r\n) {\r\n  @include experimental(box-flex, $flex,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Default flex group\r\n$default-box-flex-group: 1 !default;\r\n\r\n// mixin which takes an int argument for flexible grouping\r\n@mixin box-flex-group(\r\n  $group: $default-box-flex-group\r\n) {\r\n  @include experimental(box-flex-group, $group,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// default for ordinal group\r\n$default-box-ordinal-group: 1 !default;\r\n\r\n// mixin which takes an int argument for ordinal grouping and rearranging the order\r\n@mixin box-ordinal-group(\r\n  $group: $default-ordinal-flex-group\r\n) {\r\n  @include experimental(box-ordinal-group, $group,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Box direction default value\r\n$default-box-direction: normal !default;\r\n\r\n// mixin for box-direction [ normal | reverse | inherit ]\r\n@mixin box-direction(\r\n  $direction: $default-box-direction\r\n) {\r\n  $direction: unquote($direction);\r\n  @include experimental(box-direction, $direction,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// default for box lines\r\n$default-box-lines: single !default;\r\n\r\n// mixin for box lines [ single | multiple ]\r\n@mixin box-lines(\r\n  $lines: $default-box-lines\r\n) {\r\n  $lines: unquote($lines);\r\n  @include experimental(box-lines, $lines,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// default for box pack\r\n$default-box-pack: start !default;\r\n\r\n// mixin for box pack [ start | end | center | justify ]\r\n@mixin box-pack(\r\n  $pack: $default-box-pack\r\n) {\r\n  $pack: unquote($pack);\r\n  @include experimental(box-pack, $pack,\r\n    -moz, -webkit, not(-o), -ms, not(-khtml), official\r\n  );\r\n}","@import \"shared\";\r\n\r\n// The default value is `padding-box` -- the box model used by modern browsers.\r\n//\r\n// If you wish to do so, you can override the default constant with `border-box`\r\n//\r\n// To override to the default border-box model, use this code:\r\n//     $default-background-clip: border-box\r\n\r\n$default-background-clip: padding-box !default;\r\n\r\n// Clip the background (image and color) at the edge of the padding or border.\r\n//\r\n// Legal Values:\r\n//\r\n//   * padding-box\r\n//   * border-box\r\n//   * text\r\n\r\n@mixin background-clip($clip: $default-background-clip) {\r\n  // webkit and mozilla use the deprecated short [border | padding]\r\n  $clip: unquote($clip);\r\n  $deprecated: $clip;\r\n  @if $clip == padding-box { $deprecated: padding; }\r\n  @if $clip == border-box { $deprecated: border; }\r\n  // Support for webkit and mozilla's use of the deprecated short form\r\n  @include experimental(background-clip, $deprecated,\r\n    -moz,\r\n    -webkit,\r\n    not(-o),\r\n    not(-ms),\r\n    not(-khtml),\r\n    not official\r\n  );\r\n  @include experimental(background-clip, $clip,\r\n    not(-moz),\r\n    not(-webkit),\r\n    not(-o),\r\n    not(-ms),\r\n    -khtml,\r\n    official\r\n  );\r\n}\r\n","// Override `$default-background-origin` to change the default.\r\n\r\n@import \"shared\";\r\n\r\n$default-background-origin: content-box !default;\r\n\r\n// Position the background off the edge of the padding, border or content\r\n//\r\n// * Possible values:\r\n//   * `padding-box`\r\n//   * `border-box`\r\n//   * `content-box`\r\n// * browser defaults to `padding-box`\r\n// * mixin defaults to `content-box`\r\n\r\n\r\n@mixin background-origin($origin: $default-background-origin) {\r\n  $origin: unquote($origin);\r\n  // webkit and mozilla use the deprecated short [border | padding | content]\r\n  $deprecated: $origin;\r\n  @if $origin == padding-box { $deprecated: padding; }\r\n  @if $origin == border-box  { $deprecated: border;  }\r\n  @if $origin == content-box { $deprecated: content; }\r\n\r\n  // Support for webkit and mozilla's use of the deprecated short form\r\n  @include experimental(background-origin, $deprecated,\r\n    -moz,\r\n    -webkit,\r\n    not(-o),\r\n    not(-ms),\r\n    not(-khtml),\r\n    not official\r\n  );\r\n  @include experimental(background-origin, $origin,\r\n    not(-moz),\r\n    not(-webkit),\r\n    -o,\r\n    -ms,\r\n    -khtml,\r\n    official\r\n  );\r\n}\r\n","@import \"shared\";\r\n\r\n// Cross-browser support for @font-face. Supports IE, Gecko, Webkit, Opera.\r\n//\r\n// * $name is required, arbitrary, and what you will use in font stacks.\r\n// * $font-files is required using font-files('relative/location', 'format').\r\n//   for best results use this order: woff, opentype/truetype, svg\r\n// * $eot is required by IE, and is a relative location of the eot file.\r\n// * $weight shows if the font is bold, defaults to normal\r\n// * $style defaults to normal, might be also italic\r\n// * For android 2.2 Compatiblity, please ensure that your web page has\r\n//   a meta viewport tag.\r\n// * To support iOS < 4.2, an SVG file must be provided\r\n//\r\n// If you need to generate other formats check out the Font Squirrel\r\n// [font generator](http://www.fontsquirrel.com/fontface/generator)\r\n//\r\n\r\n// In order to refer to a specific style of the font in your stylesheets as \r\n// e.g. \"font-style: italic;\",  you may add a couple of @font-face includes\r\n// containing the respective font files for each style and specying\r\n// respective the $style parameter.\r\n\r\n// Order of the includes matters, and it is: normal, bold, italic, bold+italic.\r\n\r\n@mixin font-face(\r\n  $name, \r\n  $font-files, \r\n  $eot: false,\r\n  $weight: false,\r\n  $style: false\r\n) {\r\n  $iefont: unquote(\"#{$eot}?#iefix\");\r\n  @font-face {\r\n    font-family: quote($name);\r\n    @if $eot {\r\n      src: font-url($eot);\r\n      $font-files: font-url($iefont) unquote(\"format('eot')\"), $font-files; \r\n    }\r\n    src: $font-files;\r\n    @if $weight {\r\n      font-weight: $weight;\r\n    }\r\n    @if $style {\r\n      font-style: $style;\r\n    }\r\n  }\r\n}\r\n","@import \"shared\";\r\n\r\n// @doc off\r\n// Note ----------------------------------------------------------------------\r\n// Safari, Chrome, and Firefox all support 3D transforms. However,\r\n// only in the most recent builds. You should also provide fallback 2d support for\r\n// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.\r\n// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)\r\n// to switch between the two support lists. The toggle defaults to 'false' (2D),\r\n// and also accepts 'true' (3D). Currently the lists are as follows:\r\n// 2D: Mozilla, Webkit, Opera, Official\r\n// 3D: Webkit, Firefox.\r\n\r\n// Available Transforms ------------------------------------------------------\r\n// - Scale (2d and 3d)\r\n// - Rotate (2d and 3d)\r\n// - Translate (2d and 3d)\r\n// - Skew (2d only)\r\n\r\n// Transform Parameters ------------------------------------------------------\r\n// - Transform Origin (2d and 3d)\r\n// - Perspective (3d)\r\n// - Perspective Origin (3d)\r\n// - Transform Style (3d)\r\n// - Backface Visibility (3d)\r\n\r\n// Mixins --------------------------------------------------------------------\r\n// transform-origin\r\n//  - shortcuts:  transform-origin2d, transform-origin3d\r\n//  - helpers:    apply-origin\r\n// transform\r\n//  - shortcuts:  transform2d, transform3d\r\n//  - helpers:    simple-transform, create-transform\r\n// perspective\r\n//  - helpers:    perspective-origin\r\n// transform-style\r\n// backface-visibility\r\n// scale\r\n//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d\r\n// rotate\r\n//  - shortcuts:  rotateX, rotateY, rotate3d\r\n// translate\r\n//  - shortcuts:  translateX, translateY, translateZ, translate3d\r\n// skew\r\n//  - shortcuts:  skewX, skewY\r\n\r\n// Defaults ------------------------------------------------------------------\r\n// @doc on\r\n\r\n// The default x-origin for transforms\r\n$default-origin-x    : 50%                   !default;\r\n// The default y-origin for transforms\r\n$default-origin-y    : 50%                   !default;\r\n// The default z-origin for transforms\r\n$default-origin-z    : 50%                   !default;\r\n\r\n\r\n// The default x-multiplier for scaling\r\n$default-scale-x     : 1.25                  !default;\r\n// The default y-multiplier for scaling\r\n$default-scale-y     : $default-scale-x      !default;\r\n// The default z-multiplier for scaling\r\n$default-scale-z     : $default-scale-x      !default;\r\n\r\n\r\n// The default angle for rotations\r\n$default-rotate      : 45deg                 !default;\r\n\r\n\r\n// The default x-vector for the axis of 3d rotations\r\n$default-vector-x    : 1                     !default;\r\n// The default y-vector for the axis of 3d rotations\r\n$default-vector-y    : 1                     !default;\r\n// The default z-vector for the axis of 3d rotations\r\n$default-vector-z    : 1                     !default;\r\n\r\n\r\n// The default x-length for translations\r\n$default-translate-x : 1em                   !default;\r\n// The default y-length for translations\r\n$default-translate-y : $default-translate-x  !default;\r\n// The default z-length for translations\r\n$default-translate-z : $default-translate-x  !default;\r\n\r\n\r\n// The default x-angle for skewing\r\n$default-skew-x      : 5deg                  !default;\r\n// The default y-angle for skewing\r\n$default-skew-y      : 5deg                  !default;\r\n\r\n\r\n// **Transform-origin**\r\n// Transform-origin sent as a complete string\r\n//\r\n//     @include apply-origin( origin [, 3D-only ] )\r\n//\r\n// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates\r\n// in percentages, absolute (px, cm, in, em etc..) or relative\r\n// (left, top, right, bottom, center) units\r\n//\r\n// @param only3d Set this to true to only apply this\r\n// mixin where browsers have 3D support.\r\n@mixin apply-origin($origin, $only3d) {\r\n  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;\r\n  @if $only3d {\r\n    @include experimental(transform-origin, $origin,\r\n      -moz, -webkit, -o, -ms, not(-khtml), official\r\n    );\r\n  } @else {\r\n    @include experimental(transform-origin, $origin,\r\n      -moz, -webkit, -o, -ms, not(-khtml), official\r\n    );\r\n  }\r\n}\r\n\r\n// Transform-origin sent as individual arguments:\r\n//\r\n//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )\r\n//\r\n// where the 3 'origin-' arguments represent x/y/z coordinates.\r\n//\r\n// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support\r\n@mixin transform-origin(\r\n  $origin-x: $default-origin-x,\r\n  $origin-y: $default-origin-y,\r\n  $origin-z: false,\r\n  $only3d:   if($origin-z, true, false)\r\n) {\r\n  $origin: unquote('');\r\n  @if $origin-x or $origin-y or $origin-z {\r\n    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }\r\n    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}\r\n    @if $origin-z { $origin: $origin $origin-z; }\r\n    @include apply-origin($origin, $only3d);\r\n  }\r\n}\r\n\r\n\r\n// Transform sent as a complete string:\r\n//\r\n//     @include transform( transforms [, 3D-only ] )\r\n//\r\n// where 'transforms' is a space separated list of all the transforms to be applied.\r\n@mixin transform(\r\n  $transform,\r\n  $only3d: false\r\n) {\r\n  @if $only3d {\r\n    @include experimental(transform, $transform,\r\n      -moz, -webkit, -o, -ms, not(-khtml), official\r\n    );\r\n  } @else {\r\n    @include experimental(transform, $transform,\r\n      -moz, -webkit, -o, -ms, not(-khtml), official\r\n    );\r\n  }\r\n}\r\n\r\n// Shortcut to target all browsers with 2D transform support\r\n@mixin transform2d($trans) {\r\n  @include transform($trans, false);\r\n}\r\n\r\n// Shortcut to target only browsers with 3D transform support\r\n@mixin transform3d($trans) {\r\n  @include transform($trans, true);\r\n}\r\n\r\n// @doc off\r\n// 3D Parameters -------------------------------------------------------------\r\n// @doc on\r\n\r\n// Set the perspective of 3D transforms on the children of an element:\r\n//\r\n//      @include perspective( perspective )\r\n//\r\n// where 'perspective' is a unitless number representing the depth of the\r\n// z-axis. The higher the perspective, the more exaggerated the foreshortening.\r\n// values from 500 to 1000 are more-or-less \"normal\" - a good starting-point.\r\n@mixin perspective($p) {\r\n  @include experimental(perspective, $p,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Set the origin position for the perspective\r\n//\r\n//      @include perspective-origin(origin-x [origin-y])\r\n//\r\n// where the two arguments represent x/y coordinates\r\n@mixin perspective-origin($origin: 50%) {\r\n  @include experimental(perspective-origin, $origin,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Determine whether a 3D objects children also live in the given 3D space\r\n//\r\n//      @include transform-style( [ style ] )\r\n//\r\n// where `style` can be either `flat` or `preserve-3d`.\r\n// Browsers default to `flat`, mixin defaults to `preserve-3d`.\r\n@mixin transform-style($style: preserve-3d) {\r\n  @include experimental(transform-style, $style,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// Determine the visibility of an element when it's back is turned\r\n//\r\n//     @include backface-visibility( [ visibility ] )\r\n//\r\n// where `visibility` can be either `visible` or `hidden`.\r\n// Browsers default to visible, mixin defaults to hidden\r\n@mixin backface-visibility($visibility: hidden) {\r\n  @include experimental(backface-visibility, $visibility,\r\n    -moz, -webkit, -o, -ms, not(-khtml), official\r\n  );\r\n}\r\n\r\n// @doc off\r\n// Transform Partials --------------------------------------------------------\r\n// These work well on their own, but they don't add to each other, they override.\r\n// Use along with transform parameter mixins to adjust origin, perspective and style\r\n// ---------------------------------------------------------------------------\r\n\r\n\r\n// Scale ---------------------------------------------------------------------\r\n// @doc on\r\n\r\n// Scale an object along the x and y axis:\r\n//\r\n//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )\r\n//\r\n// where the 'scale-' arguments are unitless multipliers of the x and y dimensions\r\n// and perspective, which works the same as the stand-alone perspective property/mixin\r\n// but applies to the individual element (multiplied with any parent perspective)\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin scale(\r\n  $scale-x:     $default-scale-x,\r\n  $scale-y:     $scale-x,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  $trans: scale($scale-x, $scale-y);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Scale an object along the x axis\r\n// @include scaleX( [ scale-x, perspective, 3D-only ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin scaleX(\r\n  $scale:       $default-scale-x,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  $trans: scaleX($scale);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Scale an object along the y axis\r\n// @include scaleY( [ scale-y, perspective, 3D-only ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin scaleY(\r\n  $scale:       $default-scale-y,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  $trans: scaleY($scale);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Scale an object along the z axis\r\n// @include scaleZ( [ scale-z, perspective ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin scaleZ(\r\n  $scale: $default-scale-z,\r\n  $perspective: false\r\n) {\r\n  $trans: scaleZ($scale);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform3d($trans);\r\n}\r\n\r\n// Scale and object along all three axis\r\n// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin scale3d(\r\n  $scale-x:     $default-scale-x,\r\n  $scale-y:     $default-scale-y,\r\n  $scale-z:     $default-scale-z,\r\n  $perspective: false\r\n) {\r\n  $trans: scale3d($scale-x, $scale-y, $scale-z);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform3d($trans);\r\n}\r\n\r\n// @doc off\r\n// Rotate --------------------------------------------------------------------\r\n// @doc on\r\n\r\n// Rotate an object around the z axis  (2D)\r\n// @include rotate( [ rotation, perspective, 3D-only ] )\r\n// where 'rotation' is an angle set in degrees (deg) or radian (rad) units\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin rotate(\r\n  $rotate:      $default-rotate,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  $trans: rotate($rotate);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// A longcut for 'rotate' in case you forget that 'z' is implied\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin rotateZ(\r\n  $rotate:      $default-rotate,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  @include rotate($rotate, $perspective, $only3d);\r\n}\r\n\r\n// Rotate an object around the x axis (3D)\r\n// @include rotateX( [ rotation, perspective ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin rotateX(\r\n  $rotate: $default-rotate,\r\n  $perspective: false\r\n) {\r\n  $trans: rotateX($rotate);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform3d($trans);\r\n}\r\n\r\n// Rotate an object around the y axis (3D)\r\n// @include rotate( [ rotation, perspective ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin rotateY(\r\n  $rotate: $default-rotate,\r\n  $perspective: false\r\n) {\r\n  $trans: rotateY($rotate);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform3d($trans);\r\n}\r\n\r\n// Rotate an object around an arbitrary axis (3D)\r\n// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )\r\n// where the 'vector-' arguments accept unitless numbers.\r\n// These numbers are not important on their own, but in relation to one another\r\n// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz.\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin rotate3d(\r\n  $vector-x: $default-vector-x,\r\n  $vector-y: $default-vector-y,\r\n  $vector-z: $default-vector-z,\r\n  $rotate: $default-rotate,\r\n  $perspective: false\r\n) {\r\n  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform3d($trans);\r\n}\r\n\r\n// @doc off\r\n// Translate -----------------------------------------------------------------\r\n// @doc on\r\n\r\n// Move an object along the x or y axis (2D)\r\n// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )\r\n// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units.\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin translate(\r\n  $translate-x: $default-translate-x,\r\n  $translate-y: $default-translate-y,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  $trans: translate($translate-x, $translate-y);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Move an object along the x axis (2D)\r\n// @include translate( [ translate-x, perspective, 3D-only ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin translateX(\r\n  $trans-x:     $default-translate-x,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  $trans: translateX($trans-x);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Move an object along the y axis (2D)\r\n// @include translate( [ translate-y, perspective, 3D-only ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin translateY(\r\n  $trans-y:     $default-translate-y,\r\n  $perspective: false,\r\n  $only3d:      false\r\n) {\r\n  $trans: translateY($trans-y);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Move an object along the z axis (3D)\r\n// @include translate( [ translate-z, perspective ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin translateZ(\r\n  $trans-z:     $default-translate-z,\r\n  $perspective: false\r\n) {\r\n  $trans: translateZ($trans-z);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform3d($trans);\r\n}\r\n\r\n// Move an object along the x, y and z axis (3D)\r\n// @include translate( [ translate-x, translate-y, translate-z, perspective ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin translate3d(\r\n  $translate-x: $default-translate-x,\r\n  $translate-y: $default-translate-y,\r\n  $translate-z: $default-translate-z,\r\n  $perspective: false\r\n) {\r\n  $trans: translate3d($translate-x, $translate-y, $translate-z);\r\n  @if $perspective { $trans: perspective($perspective) $trans; }\r\n  @include transform3d($trans);\r\n}\r\n\r\n// @doc off\r\n// Skew ----------------------------------------------------------------------\r\n// @doc on\r\n\r\n// Skew an element:\r\n//\r\n//     @include skew( [ skew-x, skew-y, 3D-only ] )\r\n//\r\n// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units.\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin skew(\r\n  $skew-x: $default-skew-x,\r\n  $skew-y: $default-skew-y,\r\n  $only3d: false\r\n) {\r\n  $trans: skew($skew-x, $skew-y);\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Skew an element along the x axiz\r\n//\r\n//     @include skew( [ skew-x, 3D-only ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin skewX(\r\n  $skew-x: $default-skew-x,\r\n  $only3d: false\r\n) {\r\n  $trans: skewX($skew-x);\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n// Skew an element along the y axis\r\n//\r\n//     @include skew( [ skew-y, 3D-only ] )\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin skewY(\r\n  $skew-y: $default-skew-y,\r\n  $only3d: false\r\n) {\r\n  $trans: skewY($skew-y);\r\n  @include transform($trans, $only3d);\r\n}\r\n\r\n\r\n// Full transform mixins\r\n// For settings any combination of transforms as arguments\r\n// These are complex and not highly recommended for daily use. They are mainly\r\n// here for backward-compatibility purposes.\r\n//\r\n// * they include origin adjustments\r\n// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)\r\n//\r\n// **Note** This mixin cannot be combined with other transform mixins.\r\n@mixin create-transform(\r\n  $perspective: false,\r\n  $scale-x:     false,\r\n  $scale-y:     false,\r\n  $scale-z:     false,\r\n  $rotate-x:    false,\r\n  $rotate-y:    false,\r\n  $rotate-z:    false,\r\n  $rotate3d:    false,\r\n  $trans-x:     false,\r\n  $trans-y:     false,\r\n  $trans-z:     false,\r\n  $skew-x:      false,\r\n  $skew-y:      false,\r\n  $origin-x:    false,\r\n  $origin-y:    false,\r\n  $origin-z:    false,\r\n  $only3d:      false\r\n) {\r\n  $trans: unquote(\"\");\r\n\r\n  // perspective\r\n  @if $perspective { $trans: perspective($perspective) ; }\r\n\r\n  // scale\r\n  @if $scale-x and $scale-y {\r\n    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }\r\n    @else { $trans: $trans scale($scale-x, $scale-y); }\r\n  } @else {\r\n    @if $scale-x { $trans: $trans scaleX($scale-x); }\r\n    @if $scale-y { $trans: $trans scaleY($scale-y); }\r\n    @if $scale-z { $trans: $trans scaleZ($scale-z); }\r\n  }\r\n\r\n  // rotate\r\n  @if $rotate-x { $trans: $trans rotateX($rotate-x); }\r\n  @if $rotate-y { $trans: $trans rotateY($rotate-y); }\r\n  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }\r\n  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }\r\n\r\n  // translate\r\n  @if $trans-x and $trans-y {\r\n    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }\r\n    @else { $trans: $trans translate($trans-x, $trans-y); }\r\n  } @else {\r\n    @if $trans-x { $trans: $trans translateX($trans-x); }\r\n    @if $trans-y { $trans: $trans translateY($trans-y); }\r\n    @if $trans-z { $trans: $trans translateZ($trans-z); }\r\n  }\r\n\r\n  // skew\r\n  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }\r\n  @else {\r\n    @if $skew-x { $trans: $trans skewX($skew-x); }\r\n    @if $skew-y { $trans: $trans skewY($skew-y); }\r\n  }\r\n\r\n  // apply it!\r\n  @include transform($trans, $only3d);\r\n  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);\r\n}\r\n\r\n\r\n// A simplified set of options\r\n// backwards-compatible with the previous version of the 'transform' mixin\r\n@mixin simple-transform(\r\n  $scale:    false,\r\n  $rotate:   false,\r\n  $trans-x:  false,\r\n  $trans-y:  false,\r\n  $skew-x:   false,\r\n  $skew-y:   false,\r\n  $origin-x: false,\r\n  $origin-y: false\r\n) {\r\n  @include create-transform(\r\n    false,\r\n    $scale, $scale, false,\r\n    false, false, $rotate, false,\r\n    $trans-x, $trans-y, false,\r\n    $skew-x, $skew-y,\r\n    $origin-x, $origin-y, false,\r\n    false\r\n  );\r\n}\r\n","@import \"shared\";\r\n\r\n// CSS Transitions\r\n// Currently only works in Webkit.\r\n//\r\n// * expected in CSS3, FireFox 3.6/7 and Opera Presto 2.3\r\n// * We'll be prepared.\r\n//\r\n// Including this submodule sets following defaults for the mixins:\r\n//\r\n//     $default-transition-property : all\r\n//     $default-transition-duration : 1s\r\n//     $default-transition-function : false\r\n//     $default-transition-delay    : false\r\n//\r\n// Override them if you like. Timing-function and delay are set to false for browser defaults (ease, 0s).\r\n\r\n$default-transition-property: all !default;\r\n\r\n$default-transition-duration: 1s !default;\r\n\r\n$default-transition-function: false !default;\r\n\r\n$default-transition-delay: false !default;\r\n\r\n$transitionable-prefixed-values: transform, transform-origin !default;\r\n\r\n// One or more properties to transition\r\n//\r\n// * for multiple, use a comma-delimited list\r\n// * also accepts \"all\" or \"none\"\r\n\r\n@mixin transition-property($property-1: $default-transition-property,\r\n  $property-2 : false,\r\n  $property-3 : false,\r\n  $property-4 : false,\r\n  $property-5 : false,\r\n  $property-6 : false,\r\n  $property-7 : false,\r\n  $property-8 : false,\r\n  $property-9 : false,\r\n  $property-10: false\r\n) {\r\n  @if type-of($property-1) == string { $property-1: unquote($property-1); }\r\n  $properties: compact($property-1, $property-2, $property-3, $property-4, $property-5, $property-6, $property-7, $property-8, $property-9, $property-10);\r\n  @if $experimental-support-for-webkit    {       -webkit-transition-property : prefixed-for-transition(-webkit, $properties); }\r\n  @if $experimental-support-for-mozilla   {          -moz-transition-property : prefixed-for-transition(-moz,    $properties); }\r\n  @if $experimental-support-for-opera     {            -o-transition-property : prefixed-for-transition(-o,      $properties); }\r\n                                                          transition-property : $properties;\r\n}\r\n\r\n// One or more durations in seconds\r\n//\r\n// * for multiple, use a comma-delimited list\r\n// * these durations will affect the properties in the same list position\r\n\r\n@mixin transition-duration($duration-1: $default-transition-duration,\r\n  $duration-2 : false,\r\n  $duration-3 : false,\r\n  $duration-4 : false,\r\n  $duration-5 : false,\r\n  $duration-6 : false,\r\n  $duration-7 : false,\r\n  $duration-8 : false,\r\n  $duration-9 : false,\r\n  $duration-10: false\r\n) {\r\n  @if type-of($duration-1) == string { $duration-1: unquote($duration-1); }\r\n  $durations: compact($duration-1, $duration-2, $duration-3, $duration-4, $duration-5, $duration-6, $duration-7, $duration-8, $duration-9, $duration-10);\r\n  @include experimental(transition-duration, $durations,\r\n    -moz, -webkit, -o, not(-ms), not(-khtml), official\r\n  );\r\n}\r\n\r\n// One or more timing functions\r\n//\r\n// * [ ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(x1, y1, x2, y2)]\r\n// * For multiple, use a comma-delimited list\r\n// * These functions will effect the properties in the same list position\r\n\r\n@mixin transition-timing-function($function-1: $default-transition-function,\r\n  $function-2 : false,\r\n  $function-3 : false,\r\n  $function-4 : false,\r\n  $function-5 : false,\r\n  $function-6 : false,\r\n  $function-7 : false,\r\n  $function-8 : false,\r\n  $function-9 : false,\r\n  $function-10: false\r\n) {\r\n  $function-1: unquote($function-1);\r\n  $functions: compact($function-1, $function-2, $function-3, $function-4, $function-5, $function-6, $function-7, $function-8, $function-9, $function-10);\r\n  @include experimental(transition-timing-function, $functions,\r\n    -moz, -webkit, -o, not(-ms), not(-khtml), official\r\n  );\r\n}\r\n\r\n// One or more transition-delays in seconds\r\n//\r\n// * for multiple, use a comma-delimited list\r\n// * these delays will effect the properties in the same list position\r\n\r\n@mixin transition-delay($delay-1: $default-transition-delay,\r\n  $delay-2 : false,\r\n  $delay-3 : false,\r\n  $delay-4 : false,\r\n  $delay-5 : false,\r\n  $delay-6 : false,\r\n  $delay-7 : false,\r\n  $delay-8 : false,\r\n  $delay-9 : false,\r\n  $delay-10: false\r\n) {\r\n  @if type-of($delay-1) == string { $delay-1: unquote($delay-1); }\r\n  $delays: compact($delay-1, $delay-2, $delay-3, $delay-4, $delay-5, $delay-6, $delay-7, $delay-8, $delay-9, $delay-10);\r\n  @include experimental(transition-delay, $delays,\r\n    -moz, -webkit, -o, not(-ms), not(-khtml), official\r\n  );\r\n}\r\n\r\n// Transition all-in-one shorthand\r\n\r\n@mixin single-transition(\r\n  $property: $default-transition-property,\r\n  $duration: $default-transition-duration,\r\n  $function: $default-transition-function,\r\n  $delay: $default-transition-delay\r\n) {\r\n  @include transition(compact($property $duration $function $delay));\r\n}\r\n\r\n@mixin transition(\r\n  $transition-1 : default,\r\n  $transition-2 : false,\r\n  $transition-3 : false,\r\n  $transition-4 : false,\r\n  $transition-5 : false,\r\n  $transition-6 : false,\r\n  $transition-7 : false,\r\n  $transition-8 : false,\r\n  $transition-9 : false,\r\n  $transition-10: false\r\n) {\r\n  @if $transition-1 == default {\r\n    $transition-1 : compact($default-transition-property $default-transition-duration $default-transition-function $default-transition-delay);\r\n  }\r\n  $transitions: false;\r\n  @if type-of($transition-1) == list and type-of(nth($transition-1,1)) == list {\r\n    $transitions: join($transition-1, compact($transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10), comma);\r\n  } @else {\r\n    $transitions : compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10);\r\n  }\r\n  $delays: comma-list();\r\n  $has-delays: false;\r\n  $webkit-value: comma-list();\r\n  $moz-value: comma-list();\r\n  $o-value: comma-list();\r\n\r\n  // This block can be made considerably simpler at the point in time that\r\n  // we no longer need to deal with the differences in how delays are treated.\r\n  @each $transition in $transitions {\r\n    // Extract the values from the list\r\n    // (this would be cleaner if nth took a 3rd argument to provide a default value).\r\n    $property: nth($transition, 1);\r\n    $duration: false;\r\n    $timing-function: false;\r\n    $delay: false;\r\n    @if length($transition) > 1 { $duration:        nth($transition, 2); }\r\n    @if length($transition) > 2 { $timing-function: nth($transition, 3); }\r\n    @if length($transition) > 3 { $delay:           nth($transition, 4); $has-delays: true; }\r\n\r\n    // If a delay is provided without a timing function\r\n    @if is-time($timing-function) and not $delay { $delay: $timing-function; $timing-function: false; $has-delays: true; }\r\n\r\n    // Keep a list of delays in case one is specified\r\n    $delays: append($delays, if($delay, $delay, 0s));\r\n\r\n    $webkit-value: append($webkit-value, compact(prefixed-for-transition(-webkit, $property) $duration $timing-function));\r\n       $moz-value: append(   $moz-value, compact(prefixed-for-transition(   -moz, $property) $duration $timing-function $delay));\r\n         $o-value: append(     $o-value, compact(prefixed-for-transition(     -o, $property) $duration $timing-function $delay));\r\n  }\r\n\r\n  @if $experimental-support-for-webkit    {       -webkit-transition : $webkit-value;\r\n    // old webkit doesn't support the delay parameter in the shorthand so we progressively enhance it.\r\n    @if $has-delays                       { -webkit-transition-delay : $delays;       } }\r\n  @if $experimental-support-for-mozilla   {          -moz-transition : $moz-value;    }\r\n  @if $experimental-support-for-opera     {            -o-transition : $o-value;      }\r\n                                                          transition : $transitions;\r\n}\r\n\r\n// coerce a list to be comma delimited or make a new, empty comma delimited list.\r\n@function comma-list($list: ()) {\r\n  @return join((), $list, comma);\r\n}\r\n\r\n// Returns `$property` with the given prefix if it is found in `$transitionable-prefixed-values`.\r\n@function prefixed-for-transition($prefix, $property) {\r\n  @if type-of($property) == list {\r\n    $new-list: comma-list();\r\n    @each $v in $property {\r\n      $new-list: append($new-list, prefixed-for-transition($prefix, $v));\r\n    }\r\n    @return $new-list;\r\n  } @else {\r\n    @if index($transitionable-prefixed-values, $property) {\r\n      @return #{$prefix}-#{$property};\r\n    } @else {\r\n      @return $property;\r\n    }\r\n  }\r\n}\r\n\r\n// Checks if the value given is a unit of time.\r\n@function is-time($value) {\r\n  @if type-of($value) == number {\r\n    @return not(not(index(s ms, unit($value))));\r\n  } @else {\r\n    @return false;\r\n  }\r\n}\r\n","@import \"shared\";\r\n\r\n// Change the appearance for Mozilla, Webkit and possibly the future.\r\n// The appearance property is currently not present in any newer CSS specification.\r\n//\r\n// There is no official list of accepted values, but you might check these source:\r\n//   Mozilla : https://developer.mozilla.org/en/CSS/-moz-appearance\r\n//   Webkit  : http://code.google.com/p/webkit-mirror/source/browse/Source/WebCore/css/CSSValueKeywords.in?spec=svnf1aea559dcd025a8946aa7da6e4e8306f5c1b604&r=63c7d1af44430b314233fea342c3ddb2a052e365\r\n//   (search for 'appearance' within the page)\r\n\r\n@mixin appearance($ap) {\r\n  $ap: unquote($ap);\r\n  @include experimental(appearance, $ap,\r\n    -moz, -webkit, not(-o), not(-ms), not(-khtml), official\r\n  );\r\n}\r\n","@import \"shared\";\r\n\r\n// Webkit, IE10 and future support for [CSS Regions](http://dev.w3.org/csswg/css3-regions/)\r\n//\r\n// $target is a value you use to link two regions of your css. Give the source of your content the flow-into property, and give your target container the flow-from property.\r\n//\r\n// For a visual explanation, see the diagrams at Chris Coyier's\r\n// [CSS-Tricks](http://css-tricks.com/content-folding/)\r\n\r\n@mixin flow-into($target) {\r\n  $target: unquote($target);\r\n  @include experimental(flow-into, $target,\r\n    not(-moz), -webkit, not(-o), -ms, not(-khtml), not official\r\n  );\r\n}\r\n\r\n@mixin flow-from($target) {\r\n  $target: unquote($target);\r\n  @include experimental(flow-from, $target,\r\n    not(-moz), -webkit, not(-o), -ms, not(-khtml), not official\r\n  );\r\n}","@import \"shared\";\r\n\r\n// Mixins to support specific CSS Text Level 3 elements\r\n//\r\n//\r\n//\r\n// Mixin for word-break properties\r\n// http://www.w3.org/css3-text/#word-break\r\n// * legal values for $type : normal, keep-all, break-all\r\n//\r\n// Example:\r\n//    p.wordBreak {@include word-break(break-all);}\r\n//\r\n// Which generates:\r\n//    p.wordBreak {\r\n//      -ms-word-break: break-all;\r\n//      word-break: break-all;\r\n//      word-break: break-word;}\r\n//\r\n@mixin word-break($value: normal){\r\n  @if $value == break-all {\r\n    //Most browsers handle the break-all case the same...\r\n    @include experimental(word-break, $value,\r\n      not(-moz), not(-webkit), not(-o), -ms, not(-khtml), official\r\n    );\r\n    //Webkit handles break-all differently... as break-word\r\n    @include experimental(word-break, break-word,\r\n      not(-moz), not(-webkit), not(-o), not(-ms), not(-khtml), official\r\n    );\r\n  }\r\n  @else {\r\n    @include experimental(word-break, $value,\r\n      not(-moz), not(-webkit), not(-o), -ms, not(-khtml), official\r\n    );\r\n  }\r\n}\r\n\r\n// Mixin for the hyphens property\r\n//\r\n// W3C specification: http://www.w3.org/TR/css3-text/#hyphens\r\n// * legal values for $type : auto, manual, none\r\n//\r\n// Example:\r\n//  p {\r\n//    @include hyphens(auto);}\r\n// Which generates:\r\n//  p {\r\n//    -moz-hyphens: auto;\r\n//    -webkit-hyphens: auto;\r\n//    hyphens: auto;}\r\n//\r\n@mixin hyphens($value: auto){\r\n  @include experimental(hyphens, $value,\r\n    -moz, -webkit, not(-o), not(-ms), not(-khtml), official\r\n  );\r\n}\r\n\r\n// Mixin for x-browser hyphenation based on @auchenberg's post:\r\n// Removes the need for the <wbr/> HTML tag\r\n// http://blog.kenneth.io/blog/2012/03/04/word-wrapping-hypernation-using-css/\r\n//\r\n//  Example:\r\n//  div {@include hyphenation;}\r\n//\r\n//  Which generates:\r\n//    div {\r\n//      -ms-word-break: break-all;\r\n//      word-break: break-all;\r\n//      word-break: break-word;\r\n//      -moz-hyphens: auto;\r\n//      -webkit-hyphens: auto;\r\n//      hyphens: auto;}\r\n//\r\n@mixin hyphenation{\r\n  @include word-break(break-all);\r\n  @include hyphens;\r\n}\r\n","@import \"shared\";\r\n\r\n// Provides cross-browser support for the upcoming (?) css3 filter property.\r\n//\r\n// Each filter argument should adhere to the standard css3 syntax for the\r\n// filter property.\r\n@mixin filter (\r\n  $filter-1,\r\n  $filter-2 : false,\r\n  $filter-3 : false,\r\n  $filter-4 : false,\r\n  $filter-5 : false,\r\n  $filter-6 : false,\r\n  $filter-7 : false,\r\n  $filter-8 : false,\r\n  $filter-9 : false,\r\n  $filter-10: false\r\n) {\r\n  $filter : compact($filter-1, $filter-2, $filter-3, $filter-4, $filter-5, $filter-6, $filter-7, $filter-8, $filter-9, $filter-10);\r\n  @include experimental(filter, $filter,\r\n    -moz, -webkit, not(-o), not(-ms), not(-khtml), official\r\n  );\r\n}\r\n"],"mappings":"AIAA;;;GAGG;ACHH;;;GAGG;ACHH;;;GAGG","names":[]} */
